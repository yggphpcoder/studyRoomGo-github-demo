// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"studyRoomGo/internal/biz"
	"studyRoomGo/internal/conf"
	"studyRoomGo/internal/data"
	"studyRoomGo/internal/server"
	"studyRoomGo/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	memberRepo := data.NewMemberRepo(dataData, logger)
	memberPackageCardRepo := data.NewMemberPackageCardRepo(dataData, logger)
	seatBookRepo := data.NewSeatBookRepo(dataData, logger)
	packageCardRepo := data.NewPackageCardRepo(dataData, logger)
	shopRepo := data.NewShopRepo(dataData, logger)
	seatRepo := data.NewSeatRepo(dataData, logger)
	memberUsecase := biz.NewMemberUsecase(memberRepo, memberPackageCardRepo, seatBookRepo, packageCardRepo, shopRepo, seatRepo, logger)
	equipmentRepo := data.NewEquipmentRepo(dataData, logger)
	equipmentUsecase := biz.NewEquipmentUsecase(equipmentRepo, logger)
	memberService := service.NewMemberService(memberUsecase, equipmentUsecase)
	orderRepo := data.NewOrderRepo(dataData, logger)
	packageCardUsecase := biz.NewPackageCardUsecase(packageCardRepo, memberPackageCardRepo, orderRepo, shopRepo, seatRepo, memberRepo, logger)
	packageCardService := service.NewPackageCardService(packageCardUsecase)
	authUsecase := biz.NewAuthUsecase(memberRepo, logger)
	authService := service.NewAuthService(authUsecase)
	configRepo := data.NewConfigRepo(dataData, logger)
	shopUsecase := biz.NewShopUsecase(shopRepo, configRepo, logger)
	shopService := service.NewShopService(shopUsecase)
	seatUsecase := biz.NewSeatUsecase(seatRepo, seatBookRepo, memberPackageCardRepo, shopRepo, logger)
	seatService := service.NewSeatService(seatUsecase, equipmentUsecase, packageCardUsecase)
	configUsecase := biz.NewConfigUsecase(configRepo, logger)
	configService := service.NewConfigService(configUsecase)
	dianpingService := service.NewDianpingService(packageCardUsecase)
	couponRepo := data.NewCouponRepo(dataData, logger)
	profitSharingOrderRepo := data.NewProfitSharingOrderRepo(dataData, logger)
	courseRepo := data.NewCourseRepo(dataData, logger)
	orderUsecase := biz.NewOrderUsecase(orderRepo, packageCardRepo, couponRepo, profitSharingOrderRepo, courseRepo, logger)
	orderService := service.NewOrderService(orderUsecase, packageCardUsecase)
	paymentRepo := data.NewPaymentRepo(dataData, logger)
	paymentUsecase := biz.NewPaymentUsecase(paymentRepo, orderRepo, logger)
	couponUsecase := biz.NewCouponUsecase(couponRepo, orderRepo, packageCardRepo, shopRepo, logger)
	studentCourseRepo := data.NewStudentCourseRepo(dataData, logger)
	studentRepo := data.NewStudentRepo(dataData, logger)
	courseSchedulingRepo := data.NewCourseSchedulingRepo(dataData, logger)
	classSchedulingRepo := data.NewClassSchedulingRepo(dataData, logger)
	courseUsecase := biz.NewCourseUsecase(courseRepo, studentCourseRepo, studentRepo, courseSchedulingRepo, classSchedulingRepo, shopRepo, logger)
	paymentService := service.NewPaymentService(paymentUsecase, packageCardUsecase, orderUsecase, couponUsecase, courseUsecase)
	equipmentService := service.NewEquipmentService(equipmentUsecase)
	adminService := service.NewAdminService(seatUsecase, equipmentUsecase, packageCardUsecase, orderUsecase, couponUsecase, courseUsecase)
	couponService := service.NewCouponService(couponUsecase, memberUsecase)
	wxOfficialService := service.NewWxOfficialService()
	courseService := service.NewCourseService(courseUsecase)
	serviceService := &service.Service{
		Member:      memberService,
		PackageCard: packageCardService,
		Auth:        authService,
		Shop:        shopService,
		Seat:        seatService,
		Config:      configService,
		Dianping:    dianpingService,
		Order:       orderService,
		Payment:     paymentService,
		Equipment:   equipmentService,
		Admin:       adminService,
		Coupon:      couponService,
		WxOfficial:  wxOfficialService,
		Course:      courseService,
	}
	grpcServer := server.NewGRPCServer(confServer, serviceService, logger)
	httpServer := server.NewHTTPServer(confServer, serviceService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
