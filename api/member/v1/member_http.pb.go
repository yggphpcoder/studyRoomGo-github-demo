// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: member/v1/member.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMemberGet = "/api.member.v1.Member/Get"
const OperationMemberLastNotice = "/api.member.v1.Member/LastNotice"
const OperationMemberMyCurrentUsePackageCard = "/api.member.v1.Member/MyCurrentUsePackageCard"
const OperationMemberMyNotice = "/api.member.v1.Member/MyNotice"
const OperationMemberMyPackageCard = "/api.member.v1.Member/MyPackageCard"
const OperationMemberMyPackageCardList = "/api.member.v1.Member/MyPackageCardList"
const OperationMemberMySeatBook = "/api.member.v1.Member/MySeatBook"
const OperationMemberMySeatBookList = "/api.member.v1.Member/MySeatBookList"
const OperationMemberMySeatBookLiveShared = "/api.member.v1.Member/MySeatBookLiveShared"
const OperationMemberMySeatBookShared = "/api.member.v1.Member/MySeatBookShared"
const OperationMemberMySeatLockList = "/api.member.v1.Member/MySeatLockList"
const OperationMemberReadNotice = "/api.member.v1.Member/ReadNotice"
const OperationMemberUpdate = "/api.member.v1.Member/Update"
const OperationMemberuploadAvatar = "/api.member.v1.Member/uploadAvatar"
const OperationMemberWxSubscribe = "/api.member.v1.Member/WxSubscribe"

type MemberHTTPServer interface {
	Get(context.Context, *GetRequest) (*DataReply, error)
	LastNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error)
	MyCurrentUsePackageCard(context.Context, *MyCurrentPackageCardRequest) (*MyPackageCardDataReply, error)
	MyNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error)
	MyPackageCard(context.Context, *GetRequest) (*MyPackageCardDataReply, error)
	MyPackageCardList(context.Context, *ListRequest) (*MyPackageCardDataListReply, error)
	MySeatBook(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MySeatBookList(context.Context, *MySeatBookListRequest) (*MySeatBookDataListReply, error)
	MySeatBookLiveShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MySeatBookShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MySeatLockList(context.Context, *MySeatLockRequest) (*MySeatLockDataListReply, error)
	ReadNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataReply, error)
	Update(context.Context, *UpdateRequest) (*DataReply, error)
	UploadAvatar(context.Context, *UploadAvatarRequest) (*AvatarReply, error)
	WxSubscribe(context.Context, *WxSubscribeRequest) (*WxSubscribeReply, error)
}

func RegisterMemberHTTPServer(s *http.Server, srv MemberHTTPServer) {
	r := s.Route("/")
	r.PUT("/member/v1/member", _Member_Update0_HTTP_Handler(srv))
	r.GET("/member/v1/member", _Member_Get4_HTTP_Handler(srv))
	r.POST("/member/v1/upload_avatar", _Member_UploadAvatar0_HTTP_Handler(srv))
	r.GET("/member/v1/my_package_card/list", _Member_MyPackageCardList0_HTTP_Handler(srv))
	r.GET("/member/v1/my_package_card/detail/{id}", _Member_MyPackageCard0_HTTP_Handler(srv))
	r.GET("/member/v1/my_seat_book/list", _Member_MySeatBookList0_HTTP_Handler(srv))
	r.GET("/member/v1/my_seat_lock/list", _Member_MySeatLockList0_HTTP_Handler(srv))
	r.GET("/member/v1/my_seat_book/detail/{id}", _Member_MySeatBook0_HTTP_Handler(srv))
	r.GET("/member/v1/current_use_package_card", _Member_MyCurrentUsePackageCard0_HTTP_Handler(srv))
	r.GET("/member/v1/my_seat_book_shared/detail/{id}", _Member_MySeatBookShared0_HTTP_Handler(srv))
	r.GET("/member/v1/my_seat_book_live_shared/detail/{id}", _Member_MySeatBookLiveShared0_HTTP_Handler(srv))
	r.GET("/member/v1/my_notice", _Member_MyNotice0_HTTP_Handler(srv))
	r.GET("/member/v1/last_notice", _Member_LastNotice0_HTTP_Handler(srv))
	r.POST("/member/v1/read_notice", _Member_ReadNotice0_HTTP_Handler(srv))
	r.POST("/member/v1/wx_subscribe", _Member_WxSubscribe0_HTTP_Handler(srv))
}

func _Member_Update0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_Get4_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_UploadAvatar0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadAvatarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberuploadAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadAvatar(ctx, req.(*UploadAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AvatarReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MyPackageCardList0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMyPackageCardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyPackageCardList(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyPackageCardDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MyPackageCard0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMyPackageCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyPackageCard(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyPackageCardDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MySeatBookList0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MySeatBookListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMySeatBookList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MySeatBookList(ctx, req.(*MySeatBookListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MySeatBookDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MySeatLockList0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MySeatLockRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMySeatLockList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MySeatLockList(ctx, req.(*MySeatLockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MySeatLockDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MySeatBook0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MySeatBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMySeatBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MySeatBook(ctx, req.(*MySeatBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MySeatBookDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MyCurrentUsePackageCard0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyCurrentPackageCardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMyCurrentUsePackageCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyCurrentUsePackageCard(ctx, req.(*MyCurrentPackageCardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyPackageCardDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MySeatBookShared0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MySeatBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMySeatBookShared)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MySeatBookShared(ctx, req.(*MySeatBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MySeatBookDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MySeatBookLiveShared0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MySeatBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMySeatBookLiveShared)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MySeatBookLiveShared(ctx, req.(*MySeatBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MySeatBookDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_MyNotice0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberMyNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyNotice(ctx, req.(*MyNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyNoticeDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Member_LastNotice0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberLastNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LastNotice(ctx, req.(*MyNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyNoticeDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Member_ReadNotice0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberReadNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadNotice(ctx, req.(*MyNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyNoticeDataReply)
		return ctx.Result(200, reply)
	}
}

func _Member_WxSubscribe0_HTTP_Handler(srv MemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WxSubscribeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMemberWxSubscribe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WxSubscribe(ctx, req.(*WxSubscribeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WxSubscribeReply)
		return ctx.Result(200, reply)
	}
}

type MemberHTTPClient interface {
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	LastNotice(ctx context.Context, req *MyNoticeRequest, opts ...http.CallOption) (rsp *MyNoticeDataListReply, err error)
	MyCurrentUsePackageCard(ctx context.Context, req *MyCurrentPackageCardRequest, opts ...http.CallOption) (rsp *MyPackageCardDataReply, err error)
	MyNotice(ctx context.Context, req *MyNoticeRequest, opts ...http.CallOption) (rsp *MyNoticeDataListReply, err error)
	MyPackageCard(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *MyPackageCardDataReply, err error)
	MyPackageCardList(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *MyPackageCardDataListReply, err error)
	MySeatBook(ctx context.Context, req *MySeatBookRequest, opts ...http.CallOption) (rsp *MySeatBookDataReply, err error)
	MySeatBookList(ctx context.Context, req *MySeatBookListRequest, opts ...http.CallOption) (rsp *MySeatBookDataListReply, err error)
	MySeatBookLiveShared(ctx context.Context, req *MySeatBookRequest, opts ...http.CallOption) (rsp *MySeatBookDataReply, err error)
	MySeatBookShared(ctx context.Context, req *MySeatBookRequest, opts ...http.CallOption) (rsp *MySeatBookDataReply, err error)
	MySeatLockList(ctx context.Context, req *MySeatLockRequest, opts ...http.CallOption) (rsp *MySeatLockDataListReply, err error)
	ReadNotice(ctx context.Context, req *MyNoticeRequest, opts ...http.CallOption) (rsp *MyNoticeDataReply, err error)
	Update(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	UploadAvatar(ctx context.Context, req *UploadAvatarRequest, opts ...http.CallOption) (rsp *AvatarReply, err error)
	WxSubscribe(ctx context.Context, req *WxSubscribeRequest, opts ...http.CallOption) (rsp *WxSubscribeReply, err error)
}

type MemberHTTPClientImpl struct {
	cc *http.Client
}

func NewMemberHTTPClient(client *http.Client) MemberHTTPClient {
	return &MemberHTTPClientImpl{client}
}

func (c *MemberHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/member/v1/member"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) LastNotice(ctx context.Context, in *MyNoticeRequest, opts ...http.CallOption) (*MyNoticeDataListReply, error) {
	var out MyNoticeDataListReply
	pattern := "/member/v1/last_notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberLastNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MyCurrentUsePackageCard(ctx context.Context, in *MyCurrentPackageCardRequest, opts ...http.CallOption) (*MyPackageCardDataReply, error) {
	var out MyPackageCardDataReply
	pattern := "/member/v1/current_use_package_card"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMyCurrentUsePackageCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MyNotice(ctx context.Context, in *MyNoticeRequest, opts ...http.CallOption) (*MyNoticeDataListReply, error) {
	var out MyNoticeDataListReply
	pattern := "/member/v1/my_notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMyNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MyPackageCard(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*MyPackageCardDataReply, error) {
	var out MyPackageCardDataReply
	pattern := "/member/v1/my_package_card/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMyPackageCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MyPackageCardList(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*MyPackageCardDataListReply, error) {
	var out MyPackageCardDataListReply
	pattern := "/member/v1/my_package_card/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMyPackageCardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MySeatBook(ctx context.Context, in *MySeatBookRequest, opts ...http.CallOption) (*MySeatBookDataReply, error) {
	var out MySeatBookDataReply
	pattern := "/member/v1/my_seat_book/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMySeatBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MySeatBookList(ctx context.Context, in *MySeatBookListRequest, opts ...http.CallOption) (*MySeatBookDataListReply, error) {
	var out MySeatBookDataListReply
	pattern := "/member/v1/my_seat_book/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMySeatBookList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MySeatBookLiveShared(ctx context.Context, in *MySeatBookRequest, opts ...http.CallOption) (*MySeatBookDataReply, error) {
	var out MySeatBookDataReply
	pattern := "/member/v1/my_seat_book_live_shared/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMySeatBookLiveShared))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MySeatBookShared(ctx context.Context, in *MySeatBookRequest, opts ...http.CallOption) (*MySeatBookDataReply, error) {
	var out MySeatBookDataReply
	pattern := "/member/v1/my_seat_book_shared/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMySeatBookShared))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) MySeatLockList(ctx context.Context, in *MySeatLockRequest, opts ...http.CallOption) (*MySeatLockDataListReply, error) {
	var out MySeatLockDataListReply
	pattern := "/member/v1/my_seat_lock/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMemberMySeatLockList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) ReadNotice(ctx context.Context, in *MyNoticeRequest, opts ...http.CallOption) (*MyNoticeDataReply, error) {
	var out MyNoticeDataReply
	pattern := "/member/v1/read_notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMemberReadNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) Update(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/member/v1/member"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMemberUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...http.CallOption) (*AvatarReply, error) {
	var out AvatarReply
	pattern := "/member/v1/upload_avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMemberuploadAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MemberHTTPClientImpl) WxSubscribe(ctx context.Context, in *WxSubscribeRequest, opts ...http.CallOption) (*WxSubscribeReply, error) {
	var out WxSubscribeReply
	pattern := "/member/v1/wx_subscribe"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMemberWxSubscribe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
