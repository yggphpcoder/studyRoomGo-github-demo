// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: member/v1/member.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Member_Create_FullMethodName                  = "/api.member.v1.Member/Create"
	Member_Update_FullMethodName                  = "/api.member.v1.Member/Update"
	Member_Delete_FullMethodName                  = "/api.member.v1.Member/Delete"
	Member_Get_FullMethodName                     = "/api.member.v1.Member/Get"
	Member_UploadAvatar_FullMethodName            = "/api.member.v1.Member/uploadAvatar"
	Member_MyPackageCardList_FullMethodName       = "/api.member.v1.Member/MyPackageCardList"
	Member_MyPackageCard_FullMethodName           = "/api.member.v1.Member/MyPackageCard"
	Member_MySeatBookList_FullMethodName          = "/api.member.v1.Member/MySeatBookList"
	Member_MySeatLockList_FullMethodName          = "/api.member.v1.Member/MySeatLockList"
	Member_MySeatBook_FullMethodName              = "/api.member.v1.Member/MySeatBook"
	Member_MyCurrentUsePackageCard_FullMethodName = "/api.member.v1.Member/MyCurrentUsePackageCard"
	Member_MySeatBookShared_FullMethodName        = "/api.member.v1.Member/MySeatBookShared"
	Member_MySeatBookLiveShared_FullMethodName    = "/api.member.v1.Member/MySeatBookLiveShared"
	Member_MyNotice_FullMethodName                = "/api.member.v1.Member/MyNotice"
	Member_LastNotice_FullMethodName              = "/api.member.v1.Member/LastNotice"
	Member_ReadNotice_FullMethodName              = "/api.member.v1.Member/ReadNotice"
	Member_WxSubscribe_FullMethodName             = "/api.member.v1.Member/WxSubscribe"
)

// MemberClient is the client API for Member service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*DataReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...grpc.CallOption) (*AvatarReply, error)
	MyPackageCardList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*MyPackageCardDataListReply, error)
	MyPackageCard(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MyPackageCardDataReply, error)
	MySeatBookList(ctx context.Context, in *MySeatBookListRequest, opts ...grpc.CallOption) (*MySeatBookDataListReply, error)
	MySeatLockList(ctx context.Context, in *MySeatLockRequest, opts ...grpc.CallOption) (*MySeatLockDataListReply, error)
	MySeatBook(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error)
	MyCurrentUsePackageCard(ctx context.Context, in *MyCurrentPackageCardRequest, opts ...grpc.CallOption) (*MyPackageCardDataReply, error)
	MySeatBookShared(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error)
	MySeatBookLiveShared(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error)
	MyNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataListReply, error)
	LastNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataListReply, error)
	ReadNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataReply, error)
	WxSubscribe(ctx context.Context, in *WxSubscribeRequest, opts ...grpc.CallOption) (*WxSubscribeReply, error)
}

type memberClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberClient(cc grpc.ClientConnInterface) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, Member_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Member_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, Member_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Member_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...grpc.CallOption) (*AvatarReply, error) {
	out := new(AvatarReply)
	err := c.cc.Invoke(ctx, Member_UploadAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MyPackageCardList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*MyPackageCardDataListReply, error) {
	out := new(MyPackageCardDataListReply)
	err := c.cc.Invoke(ctx, Member_MyPackageCardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MyPackageCard(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MyPackageCardDataReply, error) {
	out := new(MyPackageCardDataReply)
	err := c.cc.Invoke(ctx, Member_MyPackageCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MySeatBookList(ctx context.Context, in *MySeatBookListRequest, opts ...grpc.CallOption) (*MySeatBookDataListReply, error) {
	out := new(MySeatBookDataListReply)
	err := c.cc.Invoke(ctx, Member_MySeatBookList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MySeatLockList(ctx context.Context, in *MySeatLockRequest, opts ...grpc.CallOption) (*MySeatLockDataListReply, error) {
	out := new(MySeatLockDataListReply)
	err := c.cc.Invoke(ctx, Member_MySeatLockList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MySeatBook(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error) {
	out := new(MySeatBookDataReply)
	err := c.cc.Invoke(ctx, Member_MySeatBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MyCurrentUsePackageCard(ctx context.Context, in *MyCurrentPackageCardRequest, opts ...grpc.CallOption) (*MyPackageCardDataReply, error) {
	out := new(MyPackageCardDataReply)
	err := c.cc.Invoke(ctx, Member_MyCurrentUsePackageCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MySeatBookShared(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error) {
	out := new(MySeatBookDataReply)
	err := c.cc.Invoke(ctx, Member_MySeatBookShared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MySeatBookLiveShared(ctx context.Context, in *MySeatBookRequest, opts ...grpc.CallOption) (*MySeatBookDataReply, error) {
	out := new(MySeatBookDataReply)
	err := c.cc.Invoke(ctx, Member_MySeatBookLiveShared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MyNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataListReply, error) {
	out := new(MyNoticeDataListReply)
	err := c.cc.Invoke(ctx, Member_MyNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) LastNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataListReply, error) {
	out := new(MyNoticeDataListReply)
	err := c.cc.Invoke(ctx, Member_LastNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ReadNotice(ctx context.Context, in *MyNoticeRequest, opts ...grpc.CallOption) (*MyNoticeDataReply, error) {
	out := new(MyNoticeDataReply)
	err := c.cc.Invoke(ctx, Member_ReadNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) WxSubscribe(ctx context.Context, in *WxSubscribeRequest, opts ...grpc.CallOption) (*WxSubscribeReply, error) {
	out := new(WxSubscribeReply)
	err := c.cc.Invoke(ctx, Member_WxSubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServer is the server API for Member service.
// All implementations must embed UnimplementedMemberServer
// for forward compatibility
type MemberServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Update(context.Context, *UpdateRequest) (*DataReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Get(context.Context, *GetRequest) (*DataReply, error)
	UploadAvatar(context.Context, *UploadAvatarRequest) (*AvatarReply, error)
	MyPackageCardList(context.Context, *ListRequest) (*MyPackageCardDataListReply, error)
	MyPackageCard(context.Context, *GetRequest) (*MyPackageCardDataReply, error)
	MySeatBookList(context.Context, *MySeatBookListRequest) (*MySeatBookDataListReply, error)
	MySeatLockList(context.Context, *MySeatLockRequest) (*MySeatLockDataListReply, error)
	MySeatBook(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MyCurrentUsePackageCard(context.Context, *MyCurrentPackageCardRequest) (*MyPackageCardDataReply, error)
	MySeatBookShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MySeatBookLiveShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error)
	MyNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error)
	LastNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error)
	ReadNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataReply, error)
	WxSubscribe(context.Context, *WxSubscribeRequest) (*WxSubscribeReply, error)
	mustEmbedUnimplementedMemberServer()
}

// UnimplementedMemberServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServer struct {
}

func (UnimplementedMemberServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMemberServer) Update(context.Context, *UpdateRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMemberServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMemberServer) Get(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMemberServer) UploadAvatar(context.Context, *UploadAvatarRequest) (*AvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedMemberServer) MyPackageCardList(context.Context, *ListRequest) (*MyPackageCardDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyPackageCardList not implemented")
}
func (UnimplementedMemberServer) MyPackageCard(context.Context, *GetRequest) (*MyPackageCardDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyPackageCard not implemented")
}
func (UnimplementedMemberServer) MySeatBookList(context.Context, *MySeatBookListRequest) (*MySeatBookDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MySeatBookList not implemented")
}
func (UnimplementedMemberServer) MySeatLockList(context.Context, *MySeatLockRequest) (*MySeatLockDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MySeatLockList not implemented")
}
func (UnimplementedMemberServer) MySeatBook(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MySeatBook not implemented")
}
func (UnimplementedMemberServer) MyCurrentUsePackageCard(context.Context, *MyCurrentPackageCardRequest) (*MyPackageCardDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyCurrentUsePackageCard not implemented")
}
func (UnimplementedMemberServer) MySeatBookShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MySeatBookShared not implemented")
}
func (UnimplementedMemberServer) MySeatBookLiveShared(context.Context, *MySeatBookRequest) (*MySeatBookDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MySeatBookLiveShared not implemented")
}
func (UnimplementedMemberServer) MyNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyNotice not implemented")
}
func (UnimplementedMemberServer) LastNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastNotice not implemented")
}
func (UnimplementedMemberServer) ReadNotice(context.Context, *MyNoticeRequest) (*MyNoticeDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotice not implemented")
}
func (UnimplementedMemberServer) WxSubscribe(context.Context, *WxSubscribeRequest) (*WxSubscribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxSubscribe not implemented")
}
func (UnimplementedMemberServer) mustEmbedUnimplementedMemberServer() {}

// UnsafeMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServer will
// result in compilation errors.
type UnsafeMemberServer interface {
	mustEmbedUnimplementedMemberServer()
}

func RegisterMemberServer(s grpc.ServiceRegistrar, srv MemberServer) {
	s.RegisterService(&Member_ServiceDesc, srv)
}

func _Member_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_UploadAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).UploadAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_UploadAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).UploadAvatar(ctx, req.(*UploadAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MyPackageCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MyPackageCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MyPackageCardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MyPackageCardList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MyPackageCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MyPackageCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MyPackageCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MyPackageCard(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MySeatBookList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MySeatBookListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MySeatBookList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MySeatBookList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MySeatBookList(ctx, req.(*MySeatBookListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MySeatLockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MySeatLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MySeatLockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MySeatLockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MySeatLockList(ctx, req.(*MySeatLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MySeatBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MySeatBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MySeatBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MySeatBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MySeatBook(ctx, req.(*MySeatBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MyCurrentUsePackageCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCurrentPackageCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MyCurrentUsePackageCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MyCurrentUsePackageCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MyCurrentUsePackageCard(ctx, req.(*MyCurrentPackageCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MySeatBookShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MySeatBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MySeatBookShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MySeatBookShared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MySeatBookShared(ctx, req.(*MySeatBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MySeatBookLiveShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MySeatBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MySeatBookLiveShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MySeatBookLiveShared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MySeatBookLiveShared(ctx, req.(*MySeatBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MyNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MyNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_MyNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MyNotice(ctx, req.(*MyNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_LastNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).LastNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_LastNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).LastNotice(ctx, req.(*MyNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ReadNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ReadNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_ReadNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ReadNotice(ctx, req.(*MyNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_WxSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).WxSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_WxSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).WxSubscribe(ctx, req.(*WxSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Member_ServiceDesc is the grpc.ServiceDesc for Member service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Member_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.member.v1.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Member_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Member_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Member_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Member_Get_Handler,
		},
		{
			MethodName: "uploadAvatar",
			Handler:    _Member_UploadAvatar_Handler,
		},
		{
			MethodName: "MyPackageCardList",
			Handler:    _Member_MyPackageCardList_Handler,
		},
		{
			MethodName: "MyPackageCard",
			Handler:    _Member_MyPackageCard_Handler,
		},
		{
			MethodName: "MySeatBookList",
			Handler:    _Member_MySeatBookList_Handler,
		},
		{
			MethodName: "MySeatLockList",
			Handler:    _Member_MySeatLockList_Handler,
		},
		{
			MethodName: "MySeatBook",
			Handler:    _Member_MySeatBook_Handler,
		},
		{
			MethodName: "MyCurrentUsePackageCard",
			Handler:    _Member_MyCurrentUsePackageCard_Handler,
		},
		{
			MethodName: "MySeatBookShared",
			Handler:    _Member_MySeatBookShared_Handler,
		},
		{
			MethodName: "MySeatBookLiveShared",
			Handler:    _Member_MySeatBookLiveShared_Handler,
		},
		{
			MethodName: "MyNotice",
			Handler:    _Member_MyNotice_Handler,
		},
		{
			MethodName: "LastNotice",
			Handler:    _Member_LastNotice_Handler,
		},
		{
			MethodName: "ReadNotice",
			Handler:    _Member_ReadNotice_Handler,
		},
		{
			MethodName: "WxSubscribe",
			Handler:    _Member_WxSubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member/v1/member.proto",
}
