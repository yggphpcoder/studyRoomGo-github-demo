// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: config/v1/config.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConfigFindDict = "/api.config.v1.Config/FindDict"
const OperationConfigGetDict = "/api.config.v1.Config/GetDict"
const OperationConfigListDict = "/api.config.v1.Config/ListDict"
const OperationConfigSearchDict = "/api.config.v1.Config/SearchDict"
const OperationConfigSearchEdDict = "/api.config.v1.Config/SearchEdDict"
const OperationConfigSearchSetting = "/api.config.v1.Config/SearchSetting"

type ConfigHTTPServer interface {
	FindDict(context.Context, *FindRequest) (*DataDictReply, error)
	// GetDict  rpc Create (CreateRequest) returns (CreateReply);
	//  rpc Update (UpdateRequest) returns (UpdateReply);
	//  rpc Delete (DeleteRequest) returns (DeleteReply);
	GetDict(context.Context, *GetRequest) (*DataDictReply, error)
	ListDict(context.Context, *ListRequest) (*ListDictReply, error)
	SearchDict(context.Context, *SearchDictRequest) (*ListDictReply, error)
	SearchEdDict(context.Context, *SearchDictRequest) (*ListDictReply, error)
	SearchSetting(context.Context, *SearchSettingRequest) (*ListSettingReply, error)
}

func RegisterConfigHTTPServer(s *http.Server, srv ConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/config/v1/dict/detail/{id}", _Config_GetDict0_HTTP_Handler(srv))
	r.GET("/config/v1/dict/find", _Config_FindDict0_HTTP_Handler(srv))
	r.GET("/config/v1/dict/list", _Config_ListDict0_HTTP_Handler(srv))
	r.GET("/config/v1/dict/search", _Config_SearchDict0_HTTP_Handler(srv))
	r.GET("/config/v1/ed-dict/search", _Config_SearchEdDict0_HTTP_Handler(srv))
	r.GET("/config/v1/setting/search", _Config_SearchSetting0_HTTP_Handler(srv))
}

func _Config_GetDict0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigGetDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDict(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataDictReply)
		return ctx.Result(200, reply)
	}
}

func _Config_FindDict0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigFindDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindDict(ctx, req.(*FindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataDictReply)
		return ctx.Result(200, reply)
	}
}

func _Config_ListDict0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigListDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDict(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictReply)
		return ctx.Result(200, reply)
	}
}

func _Config_SearchDict0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigSearchDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchDict(ctx, req.(*SearchDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictReply)
		return ctx.Result(200, reply)
	}
}

func _Config_SearchEdDict0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigSearchEdDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchEdDict(ctx, req.(*SearchDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictReply)
		return ctx.Result(200, reply)
	}
}

func _Config_SearchSetting0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchSettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigSearchSetting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchSetting(ctx, req.(*SearchSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSettingReply)
		return ctx.Result(200, reply)
	}
}

type ConfigHTTPClient interface {
	FindDict(ctx context.Context, req *FindRequest, opts ...http.CallOption) (rsp *DataDictReply, err error)
	GetDict(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataDictReply, err error)
	ListDict(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListDictReply, err error)
	SearchDict(ctx context.Context, req *SearchDictRequest, opts ...http.CallOption) (rsp *ListDictReply, err error)
	SearchEdDict(ctx context.Context, req *SearchDictRequest, opts ...http.CallOption) (rsp *ListDictReply, err error)
	SearchSetting(ctx context.Context, req *SearchSettingRequest, opts ...http.CallOption) (rsp *ListSettingReply, err error)
}

type ConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewConfigHTTPClient(client *http.Client) ConfigHTTPClient {
	return &ConfigHTTPClientImpl{client}
}

func (c *ConfigHTTPClientImpl) FindDict(ctx context.Context, in *FindRequest, opts ...http.CallOption) (*DataDictReply, error) {
	var out DataDictReply
	pattern := "/config/v1/dict/find"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigFindDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigHTTPClientImpl) GetDict(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataDictReply, error) {
	var out DataDictReply
	pattern := "/config/v1/dict/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigGetDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigHTTPClientImpl) ListDict(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListDictReply, error) {
	var out ListDictReply
	pattern := "/config/v1/dict/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigListDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigHTTPClientImpl) SearchDict(ctx context.Context, in *SearchDictRequest, opts ...http.CallOption) (*ListDictReply, error) {
	var out ListDictReply
	pattern := "/config/v1/dict/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigSearchDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigHTTPClientImpl) SearchEdDict(ctx context.Context, in *SearchDictRequest, opts ...http.CallOption) (*ListDictReply, error) {
	var out ListDictReply
	pattern := "/config/v1/ed-dict/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigSearchEdDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigHTTPClientImpl) SearchSetting(ctx context.Context, in *SearchSettingRequest, opts ...http.CallOption) (*ListSettingReply, error) {
	var out ListSettingReply
	pattern := "/config/v1/setting/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigSearchSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
