// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: dianping/v1/dianping.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDianpingaccessToken = "/api.dianping.v1.Dianping/accessToken"
const OperationDianpingprepare = "/api.dianping.v1.Dianping/prepare"
const OperationDianpingscanPrepare = "/api.dianping.v1.Dianping/scanPrepare"

type DianpingHTTPServer interface {
	AccessToken(context.Context, *PrepareRequest) (*DataReply, error)
	Prepare(context.Context, *PrepareRequest) (*DataReply, error)
	ScanPrepare(context.Context, *PrepareRequest) (*DataReply, error)
}

func RegisterDianpingHTTPServer(s *http.Server, srv DianpingHTTPServer) {
	r := s.Route("/")
	r.POST("/dianping/v1/prepare", _Dianping_Prepare0_HTTP_Handler(srv))
	r.POST("/dianping/v1/scanprepare", _Dianping_ScanPrepare0_HTTP_Handler(srv))
	r.POST("/dianping/v1/accessToken", _Dianping_AccessToken0_HTTP_Handler(srv))
}

func _Dianping_Prepare0_HTTP_Handler(srv DianpingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PrepareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDianpingprepare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Prepare(ctx, req.(*PrepareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Dianping_ScanPrepare0_HTTP_Handler(srv DianpingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PrepareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDianpingscanPrepare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScanPrepare(ctx, req.(*PrepareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Dianping_AccessToken0_HTTP_Handler(srv DianpingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PrepareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDianpingaccessToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccessToken(ctx, req.(*PrepareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

type DianpingHTTPClient interface {
	AccessToken(ctx context.Context, req *PrepareRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	Prepare(ctx context.Context, req *PrepareRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	ScanPrepare(ctx context.Context, req *PrepareRequest, opts ...http.CallOption) (rsp *DataReply, err error)
}

type DianpingHTTPClientImpl struct {
	cc *http.Client
}

func NewDianpingHTTPClient(client *http.Client) DianpingHTTPClient {
	return &DianpingHTTPClientImpl{client}
}

func (c *DianpingHTTPClientImpl) AccessToken(ctx context.Context, in *PrepareRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/dianping/v1/accessToken"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDianpingaccessToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DianpingHTTPClientImpl) Prepare(ctx context.Context, in *PrepareRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/dianping/v1/prepare"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDianpingprepare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DianpingHTTPClientImpl) ScanPrepare(ctx context.Context, in *PrepareRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/dianping/v1/scanprepare"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDianpingscanPrepare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
