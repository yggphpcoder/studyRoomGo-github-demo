// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: coupon/v1/coupon.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCouponCouponCenter = "/api.coupon.v1.Coupon/CouponCenter"
const OperationCouponMyCoupon = "/api.coupon.v1.Coupon/MyCoupon"
const OperationCouponReceiveCoupon = "/api.coupon.v1.Coupon/ReceiveCoupon"
const OperationCouponUseCouponValidate = "/api.coupon.v1.Coupon/UseCouponValidate"

type CouponHTTPServer interface {
	CouponCenter(context.Context, *CouponListRequest) (*CouponListReply, error)
	MyCoupon(context.Context, *CouponListRequest) (*CouponListReply, error)
	ReceiveCoupon(context.Context, *ReceiveCouponRequest) (*ReceiveCouponReply, error)
	UseCouponValidate(context.Context, *CouponUseRequest) (*CouponUseValidateReply, error)
}

func RegisterCouponHTTPServer(s *http.Server, srv CouponHTTPServer) {
	r := s.Route("/")
	r.GET("/coupon/v1/coupon_center", _Coupon_CouponCenter0_HTTP_Handler(srv))
	r.GET("/coupon/v1/receive_coupon", _Coupon_ReceiveCoupon0_HTTP_Handler(srv))
	r.GET("/coupon/v1/my_coupon", _Coupon_MyCoupon0_HTTP_Handler(srv))
	r.POST("/coupon/v1/use_coupon_validate", _Coupon_UseCouponValidate0_HTTP_Handler(srv))
}

func _Coupon_CouponCenter0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponCouponCenter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponCenter(ctx, req.(*CouponListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponListReply)
		return ctx.Result(200, reply)
	}
}

func _Coupon_ReceiveCoupon0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReceiveCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponReceiveCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReceiveCoupon(ctx, req.(*ReceiveCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReceiveCouponReply)
		return ctx.Result(200, reply)
	}
}

func _Coupon_MyCoupon0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponMyCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyCoupon(ctx, req.(*CouponListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponListReply)
		return ctx.Result(200, reply)
	}
}

func _Coupon_UseCouponValidate0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponUseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponUseCouponValidate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UseCouponValidate(ctx, req.(*CouponUseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponUseValidateReply)
		return ctx.Result(200, reply)
	}
}

type CouponHTTPClient interface {
	CouponCenter(ctx context.Context, req *CouponListRequest, opts ...http.CallOption) (rsp *CouponListReply, err error)
	MyCoupon(ctx context.Context, req *CouponListRequest, opts ...http.CallOption) (rsp *CouponListReply, err error)
	ReceiveCoupon(ctx context.Context, req *ReceiveCouponRequest, opts ...http.CallOption) (rsp *ReceiveCouponReply, err error)
	UseCouponValidate(ctx context.Context, req *CouponUseRequest, opts ...http.CallOption) (rsp *CouponUseValidateReply, err error)
}

type CouponHTTPClientImpl struct {
	cc *http.Client
}

func NewCouponHTTPClient(client *http.Client) CouponHTTPClient {
	return &CouponHTTPClientImpl{client}
}

func (c *CouponHTTPClientImpl) CouponCenter(ctx context.Context, in *CouponListRequest, opts ...http.CallOption) (*CouponListReply, error) {
	var out CouponListReply
	pattern := "/coupon/v1/coupon_center"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponCouponCenter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponHTTPClientImpl) MyCoupon(ctx context.Context, in *CouponListRequest, opts ...http.CallOption) (*CouponListReply, error) {
	var out CouponListReply
	pattern := "/coupon/v1/my_coupon"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponMyCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponHTTPClientImpl) ReceiveCoupon(ctx context.Context, in *ReceiveCouponRequest, opts ...http.CallOption) (*ReceiveCouponReply, error) {
	var out ReceiveCouponReply
	pattern := "/coupon/v1/receive_coupon"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponReceiveCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponHTTPClientImpl) UseCouponValidate(ctx context.Context, in *CouponUseRequest, opts ...http.CallOption) (*CouponUseValidateReply, error) {
	var out CouponUseValidateReply
	pattern := "/coupon/v1/use_coupon_validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCouponUseCouponValidate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
