// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: packageCard/v1/package_card.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackageCard_Create_FullMethodName           = "/api.packageCard.v1.PackageCard/Create"
	PackageCard_Update_FullMethodName           = "/api.packageCard.v1.PackageCard/Update"
	PackageCard_Delete_FullMethodName           = "/api.packageCard.v1.PackageCard/Delete"
	PackageCard_Get_FullMethodName              = "/api.packageCard.v1.PackageCard/Get"
	PackageCard_Find_FullMethodName             = "/api.packageCard.v1.PackageCard/Find"
	PackageCard_List_FullMethodName             = "/api.packageCard.v1.PackageCard/List"
	PackageCard_Search_FullMethodName           = "/api.packageCard.v1.PackageCard/Search"
	PackageCard_BuyCard_FullMethodName          = "/api.packageCard.v1.PackageCard/BuyCard"
	PackageCard_MemberCardActive_FullMethodName = "/api.packageCard.v1.PackageCard/MemberCardActive"
	PackageCard_FindBuyLog_FullMethodName       = "/api.packageCard.v1.PackageCard/FindBuyLog"
)

// PackageCardClient is the client API for PackageCard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageCardClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error)
	BuyCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardReply, error)
	MemberCardActive(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardReply, error)
	FindBuyLog(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*BuyLogDataReply, error)
}

type packageCardClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageCardClient(cc grpc.ClientConnInterface) PackageCardClient {
	return &packageCardClient{cc}
}

func (c *packageCardClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, PackageCard_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, PackageCard_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, PackageCard_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, PackageCard_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, PackageCard_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, PackageCard_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, PackageCard_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) BuyCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := c.cc.Invoke(ctx, PackageCard_BuyCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) MemberCardActive(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := c.cc.Invoke(ctx, PackageCard_MemberCardActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageCardClient) FindBuyLog(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*BuyLogDataReply, error) {
	out := new(BuyLogDataReply)
	err := c.cc.Invoke(ctx, PackageCard_FindBuyLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageCardServer is the server API for PackageCard service.
// All implementations must embed UnimplementedPackageCardServer
// for forward compatibility
type PackageCardServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Get(context.Context, *GetRequest) (*DataReply, error)
	Find(context.Context, *FindRequest) (*DataReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Search(context.Context, *SearchRequest) (*ListReply, error)
	BuyCard(context.Context, *CardRequest) (*CardReply, error)
	MemberCardActive(context.Context, *CardRequest) (*CardReply, error)
	FindBuyLog(context.Context, *FindRequest) (*BuyLogDataReply, error)
	mustEmbedUnimplementedPackageCardServer()
}

// UnimplementedPackageCardServer must be embedded to have forward compatible implementations.
type UnimplementedPackageCardServer struct {
}

func (UnimplementedPackageCardServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPackageCardServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPackageCardServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPackageCardServer) Get(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPackageCardServer) Find(context.Context, *FindRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPackageCardServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPackageCardServer) Search(context.Context, *SearchRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedPackageCardServer) BuyCard(context.Context, *CardRequest) (*CardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCard not implemented")
}
func (UnimplementedPackageCardServer) MemberCardActive(context.Context, *CardRequest) (*CardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberCardActive not implemented")
}
func (UnimplementedPackageCardServer) FindBuyLog(context.Context, *FindRequest) (*BuyLogDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBuyLog not implemented")
}
func (UnimplementedPackageCardServer) mustEmbedUnimplementedPackageCardServer() {}

// UnsafePackageCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageCardServer will
// result in compilation errors.
type UnsafePackageCardServer interface {
	mustEmbedUnimplementedPackageCardServer()
}

func RegisterPackageCardServer(s grpc.ServiceRegistrar, srv PackageCardServer) {
	s.RegisterService(&PackageCard_ServiceDesc, srv)
}

func _PackageCard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_BuyCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).BuyCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_BuyCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).BuyCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_MemberCardActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).MemberCardActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_MemberCardActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).MemberCardActive(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageCard_FindBuyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageCardServer).FindBuyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageCard_FindBuyLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageCardServer).FindBuyLog(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageCard_ServiceDesc is the grpc.ServiceDesc for PackageCard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageCard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.packageCard.v1.PackageCard",
	HandlerType: (*PackageCardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PackageCard_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PackageCard_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PackageCard_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PackageCard_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _PackageCard_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PackageCard_List_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _PackageCard_Search_Handler,
		},
		{
			MethodName: "BuyCard",
			Handler:    _PackageCard_BuyCard_Handler,
		},
		{
			MethodName: "MemberCardActive",
			Handler:    _PackageCard_MemberCardActive_Handler,
		},
		{
			MethodName: "FindBuyLog",
			Handler:    _PackageCard_FindBuyLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packageCard/v1/package_card.proto",
}
