// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthGetShareSign = "/api.auth.v1.Auth/GetShareSign"
const OperationAuthLoginAndRegisterByWeChat = "/api.auth.v1.Auth/LoginAndRegisterByWeChat"
const OperationAuthOauthLogin = "/api.auth.v1.Auth/OauthLogin"
const OperationAuthShareRecord = "/api.auth.v1.Auth/ShareRecord"
const OperationAuthWxLogin = "/api.auth.v1.Auth/WxLogin"

type AuthHTTPServer interface {
	GetShareSign(context.Context, *GetShareSignRequest) (*GetShareSignReply, error)
	LoginAndRegisterByWeChat(context.Context, *LoginByWeChatRequest) (*LoginByWeChatReply, error)
	OauthLogin(context.Context, *WxLoginRequest) (*LoginByWeChatReply, error)
	ShareRecord(context.Context, *ShareRecordRequest) (*ShareRecordReply, error)
	WxLogin(context.Context, *WxLoginRequest) (*CreateAuthReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/v1/wxLogin", _Auth_WxLogin0_HTTP_Handler(srv))
	r.POST("/auth/v1/loginAndRegisterByWeChat", _Auth_LoginAndRegisterByWeChat0_HTTP_Handler(srv))
	r.POST("/auth/v1/oauthLogin", _Auth_OauthLogin0_HTTP_Handler(srv))
	r.POST("/auth/v1/getShareSign", _Auth_GetShareSign0_HTTP_Handler(srv))
	r.POST("/auth/v1/shareRecord", _Auth_ShareRecord0_HTTP_Handler(srv))
}

func _Auth_WxLogin0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WxLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthWxLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WxLogin(ctx, req.(*WxLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_LoginAndRegisterByWeChat0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByWeChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthLoginAndRegisterByWeChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginAndRegisterByWeChat(ctx, req.(*LoginByWeChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByWeChatReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_OauthLogin0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WxLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthOauthLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OauthLogin(ctx, req.(*WxLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByWeChatReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetShareSign0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShareSignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetShareSign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShareSign(ctx, req.(*GetShareSignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShareSignReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ShareRecord0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShareRecordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthShareRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShareRecord(ctx, req.(*ShareRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShareRecordReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	GetShareSign(ctx context.Context, req *GetShareSignRequest, opts ...http.CallOption) (rsp *GetShareSignReply, err error)
	LoginAndRegisterByWeChat(ctx context.Context, req *LoginByWeChatRequest, opts ...http.CallOption) (rsp *LoginByWeChatReply, err error)
	OauthLogin(ctx context.Context, req *WxLoginRequest, opts ...http.CallOption) (rsp *LoginByWeChatReply, err error)
	ShareRecord(ctx context.Context, req *ShareRecordRequest, opts ...http.CallOption) (rsp *ShareRecordReply, err error)
	WxLogin(ctx context.Context, req *WxLoginRequest, opts ...http.CallOption) (rsp *CreateAuthReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) GetShareSign(ctx context.Context, in *GetShareSignRequest, opts ...http.CallOption) (*GetShareSignReply, error) {
	var out GetShareSignReply
	pattern := "/auth/v1/getShareSign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGetShareSign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) LoginAndRegisterByWeChat(ctx context.Context, in *LoginByWeChatRequest, opts ...http.CallOption) (*LoginByWeChatReply, error) {
	var out LoginByWeChatReply
	pattern := "/auth/v1/loginAndRegisterByWeChat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthLoginAndRegisterByWeChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) OauthLogin(ctx context.Context, in *WxLoginRequest, opts ...http.CallOption) (*LoginByWeChatReply, error) {
	var out LoginByWeChatReply
	pattern := "/auth/v1/oauthLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthOauthLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) ShareRecord(ctx context.Context, in *ShareRecordRequest, opts ...http.CallOption) (*ShareRecordReply, error) {
	var out ShareRecordReply
	pattern := "/auth/v1/shareRecord"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthShareRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) WxLogin(ctx context.Context, in *WxLoginRequest, opts ...http.CallOption) (*CreateAuthReply, error) {
	var out CreateAuthReply
	pattern := "/auth/v1/wxLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthWxLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
