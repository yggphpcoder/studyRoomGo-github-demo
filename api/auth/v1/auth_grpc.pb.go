// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_WxLogin_FullMethodName                  = "/api.auth.v1.Auth/WxLogin"
	Auth_LoginAndRegisterByWeChat_FullMethodName = "/api.auth.v1.Auth/LoginAndRegisterByWeChat"
	Auth_OauthLogin_FullMethodName               = "/api.auth.v1.Auth/OauthLogin"
	Auth_GetShareSign_FullMethodName             = "/api.auth.v1.Auth/GetShareSign"
	Auth_ShareRecord_FullMethodName              = "/api.auth.v1.Auth/ShareRecord"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	WxLogin(ctx context.Context, in *WxLoginRequest, opts ...grpc.CallOption) (*CreateAuthReply, error)
	LoginAndRegisterByWeChat(ctx context.Context, in *LoginByWeChatRequest, opts ...grpc.CallOption) (*LoginByWeChatReply, error)
	OauthLogin(ctx context.Context, in *WxLoginRequest, opts ...grpc.CallOption) (*LoginByWeChatReply, error)
	GetShareSign(ctx context.Context, in *GetShareSignRequest, opts ...grpc.CallOption) (*GetShareSignReply, error)
	ShareRecord(ctx context.Context, in *ShareRecordRequest, opts ...grpc.CallOption) (*ShareRecordReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) WxLogin(ctx context.Context, in *WxLoginRequest, opts ...grpc.CallOption) (*CreateAuthReply, error) {
	out := new(CreateAuthReply)
	err := c.cc.Invoke(ctx, Auth_WxLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginAndRegisterByWeChat(ctx context.Context, in *LoginByWeChatRequest, opts ...grpc.CallOption) (*LoginByWeChatReply, error) {
	out := new(LoginByWeChatReply)
	err := c.cc.Invoke(ctx, Auth_LoginAndRegisterByWeChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) OauthLogin(ctx context.Context, in *WxLoginRequest, opts ...grpc.CallOption) (*LoginByWeChatReply, error) {
	out := new(LoginByWeChatReply)
	err := c.cc.Invoke(ctx, Auth_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetShareSign(ctx context.Context, in *GetShareSignRequest, opts ...grpc.CallOption) (*GetShareSignReply, error) {
	out := new(GetShareSignReply)
	err := c.cc.Invoke(ctx, Auth_GetShareSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ShareRecord(ctx context.Context, in *ShareRecordRequest, opts ...grpc.CallOption) (*ShareRecordReply, error) {
	out := new(ShareRecordReply)
	err := c.cc.Invoke(ctx, Auth_ShareRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	WxLogin(context.Context, *WxLoginRequest) (*CreateAuthReply, error)
	LoginAndRegisterByWeChat(context.Context, *LoginByWeChatRequest) (*LoginByWeChatReply, error)
	OauthLogin(context.Context, *WxLoginRequest) (*LoginByWeChatReply, error)
	GetShareSign(context.Context, *GetShareSignRequest) (*GetShareSignReply, error)
	ShareRecord(context.Context, *ShareRecordRequest) (*ShareRecordReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) WxLogin(context.Context, *WxLoginRequest) (*CreateAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxLogin not implemented")
}
func (UnimplementedAuthServer) LoginAndRegisterByWeChat(context.Context, *LoginByWeChatRequest) (*LoginByWeChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAndRegisterByWeChat not implemented")
}
func (UnimplementedAuthServer) OauthLogin(context.Context, *WxLoginRequest) (*LoginByWeChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedAuthServer) GetShareSign(context.Context, *GetShareSignRequest) (*GetShareSignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareSign not implemented")
}
func (UnimplementedAuthServer) ShareRecord(context.Context, *ShareRecordRequest) (*ShareRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareRecord not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_WxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).WxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_WxLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).WxLogin(ctx, req.(*WxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginAndRegisterByWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByWeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginAndRegisterByWeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginAndRegisterByWeChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginAndRegisterByWeChat(ctx, req.(*LoginByWeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).OauthLogin(ctx, req.(*WxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetShareSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetShareSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetShareSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetShareSign(ctx, req.(*GetShareSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ShareRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ShareRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ShareRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ShareRecord(ctx, req.(*ShareRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WxLogin",
			Handler:    _Auth_WxLogin_Handler,
		},
		{
			MethodName: "LoginAndRegisterByWeChat",
			Handler:    _Auth_LoginAndRegisterByWeChat_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _Auth_OauthLogin_Handler,
		},
		{
			MethodName: "GetShareSign",
			Handler:    _Auth_GetShareSign_Handler,
		},
		{
			MethodName: "ShareRecord",
			Handler:    _Auth_ShareRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth.proto",
}
