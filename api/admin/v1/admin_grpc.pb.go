// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_BookingValidate_FullMethodName                = "/api.admin.v1.Admin/BookingValidate"
	Admin_Booking_FullMethodName                        = "/api.admin.v1.Admin/Booking"
	Admin_BookingChangeSeat_FullMethodName              = "/api.admin.v1.Admin/BookingChangeSeat"
	Admin_BookingAddTime_FullMethodName                 = "/api.admin.v1.Admin/BookingAddTime"
	Admin_BookingChangeStatus_FullMethodName            = "/api.admin.v1.Admin/BookingChangeStatus"
	Admin_BookingOpenDoor_FullMethodName                = "/api.admin.v1.Admin/BookingOpenDoor"
	Admin_BookingControlLight_FullMethodName            = "/api.admin.v1.Admin/BookingControlLight"
	Admin_DianpingRefreshShop_FullMethodName            = "/api.admin.v1.Admin/DianpingRefreshShop"
	Admin_DianpingRefreshTuanGou_FullMethodName         = "/api.admin.v1.Admin/DianpingRefreshTuanGou"
	Admin_SendSeatBookSubscribe_FullMethodName          = "/api.admin.v1.Admin/SendSeatBookSubscribe"
	Admin_ExecProfitSharingOrder_FullMethodName         = "/api.admin.v1.Admin/ExecProfitSharingOrder"
	Admin_UpdateProfitSharingOrderStatus_FullMethodName = "/api.admin.v1.Admin/UpdateProfitSharingOrderStatus"
	Admin_SendCoupon_FullMethodName                     = "/api.admin.v1.Admin/SendCoupon"
	Admin_StudentChangeCheckIn_FullMethodName           = "/api.admin.v1.Admin/StudentChangeCheckIn"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	BookingValidate(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingValidateReply, error)
	Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingChangeSeat(ctx context.Context, in *BookingChangeSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingAddTime(ctx context.Context, in *BookingAddTimeRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingChangeStatus(ctx context.Context, in *BookingChangeStatusRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingOpenDoor(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingControlLight(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
	DianpingRefreshShop(ctx context.Context, in *DianpingRequest, opts ...grpc.CallOption) (*DianpingReply, error)
	DianpingRefreshTuanGou(ctx context.Context, in *DianpingRequest, opts ...grpc.CallOption) (*DianpingReply, error)
	SendSeatBookSubscribe(ctx context.Context, in *BookingSubscribeRequest, opts ...grpc.CallOption) (*BookingReply, error)
	ExecProfitSharingOrder(ctx context.Context, in *ProfitSharingRequest, opts ...grpc.CallOption) (*BookingReply, error)
	UpdateProfitSharingOrderStatus(ctx context.Context, in *ProfitSharingRequest, opts ...grpc.CallOption) (*BookingReply, error)
	SendCoupon(ctx context.Context, in *SendCouponRequest, opts ...grpc.CallOption) (*SendCouponReply, error)
	StudentChangeCheckIn(ctx context.Context, in *StudentChangeCheckInRequest, opts ...grpc.CallOption) (*BookingReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) BookingValidate(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingValidateReply, error) {
	out := new(BookingValidateReply)
	err := c.cc.Invoke(ctx, Admin_BookingValidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_Booking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BookingChangeSeat(ctx context.Context, in *BookingChangeSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_BookingChangeSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BookingAddTime(ctx context.Context, in *BookingAddTimeRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_BookingAddTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BookingChangeStatus(ctx context.Context, in *BookingChangeStatusRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_BookingChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BookingOpenDoor(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_BookingOpenDoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BookingControlLight(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_BookingControlLight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DianpingRefreshShop(ctx context.Context, in *DianpingRequest, opts ...grpc.CallOption) (*DianpingReply, error) {
	out := new(DianpingReply)
	err := c.cc.Invoke(ctx, Admin_DianpingRefreshShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DianpingRefreshTuanGou(ctx context.Context, in *DianpingRequest, opts ...grpc.CallOption) (*DianpingReply, error) {
	out := new(DianpingReply)
	err := c.cc.Invoke(ctx, Admin_DianpingRefreshTuanGou_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendSeatBookSubscribe(ctx context.Context, in *BookingSubscribeRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_SendSeatBookSubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ExecProfitSharingOrder(ctx context.Context, in *ProfitSharingRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_ExecProfitSharingOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateProfitSharingOrderStatus(ctx context.Context, in *ProfitSharingRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_UpdateProfitSharingOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendCoupon(ctx context.Context, in *SendCouponRequest, opts ...grpc.CallOption) (*SendCouponReply, error) {
	out := new(SendCouponReply)
	err := c.cc.Invoke(ctx, Admin_SendCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StudentChangeCheckIn(ctx context.Context, in *StudentChangeCheckInRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Admin_StudentChangeCheckIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	BookingValidate(context.Context, *BookingRequest) (*BookingValidateReply, error)
	Booking(context.Context, *BookingRequest) (*BookingReply, error)
	BookingChangeSeat(context.Context, *BookingChangeSeatRequest) (*BookingReply, error)
	BookingAddTime(context.Context, *BookingAddTimeRequest) (*BookingReply, error)
	BookingChangeStatus(context.Context, *BookingChangeStatusRequest) (*BookingReply, error)
	BookingOpenDoor(context.Context, *BookingOpenDoorRequest) (*BookingReply, error)
	BookingControlLight(context.Context, *BookingControlSeatRequest) (*BookingReply, error)
	DianpingRefreshShop(context.Context, *DianpingRequest) (*DianpingReply, error)
	DianpingRefreshTuanGou(context.Context, *DianpingRequest) (*DianpingReply, error)
	SendSeatBookSubscribe(context.Context, *BookingSubscribeRequest) (*BookingReply, error)
	ExecProfitSharingOrder(context.Context, *ProfitSharingRequest) (*BookingReply, error)
	UpdateProfitSharingOrderStatus(context.Context, *ProfitSharingRequest) (*BookingReply, error)
	SendCoupon(context.Context, *SendCouponRequest) (*SendCouponReply, error)
	StudentChangeCheckIn(context.Context, *StudentChangeCheckInRequest) (*BookingReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) BookingValidate(context.Context, *BookingRequest) (*BookingValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingValidate not implemented")
}
func (UnimplementedAdminServer) Booking(context.Context, *BookingRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Booking not implemented")
}
func (UnimplementedAdminServer) BookingChangeSeat(context.Context, *BookingChangeSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingChangeSeat not implemented")
}
func (UnimplementedAdminServer) BookingAddTime(context.Context, *BookingAddTimeRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingAddTime not implemented")
}
func (UnimplementedAdminServer) BookingChangeStatus(context.Context, *BookingChangeStatusRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingChangeStatus not implemented")
}
func (UnimplementedAdminServer) BookingOpenDoor(context.Context, *BookingOpenDoorRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingOpenDoor not implemented")
}
func (UnimplementedAdminServer) BookingControlLight(context.Context, *BookingControlSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingControlLight not implemented")
}
func (UnimplementedAdminServer) DianpingRefreshShop(context.Context, *DianpingRequest) (*DianpingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DianpingRefreshShop not implemented")
}
func (UnimplementedAdminServer) DianpingRefreshTuanGou(context.Context, *DianpingRequest) (*DianpingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DianpingRefreshTuanGou not implemented")
}
func (UnimplementedAdminServer) SendSeatBookSubscribe(context.Context, *BookingSubscribeRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSeatBookSubscribe not implemented")
}
func (UnimplementedAdminServer) ExecProfitSharingOrder(context.Context, *ProfitSharingRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecProfitSharingOrder not implemented")
}
func (UnimplementedAdminServer) UpdateProfitSharingOrderStatus(context.Context, *ProfitSharingRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfitSharingOrderStatus not implemented")
}
func (UnimplementedAdminServer) SendCoupon(context.Context, *SendCouponRequest) (*SendCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoupon not implemented")
}
func (UnimplementedAdminServer) StudentChangeCheckIn(context.Context, *StudentChangeCheckInRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentChangeCheckIn not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_BookingValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingValidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingValidate(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Booking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Booking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Booking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Booking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BookingChangeSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingChangeSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingChangeSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingChangeSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingChangeSeat(ctx, req.(*BookingChangeSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BookingAddTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingAddTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingAddTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingAddTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingAddTime(ctx, req.(*BookingAddTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BookingChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingChangeStatus(ctx, req.(*BookingChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BookingOpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingOpenDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingOpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingOpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingOpenDoor(ctx, req.(*BookingOpenDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BookingControlLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingControlSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BookingControlLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BookingControlLight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BookingControlLight(ctx, req.(*BookingControlSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DianpingRefreshShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DianpingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DianpingRefreshShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DianpingRefreshShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DianpingRefreshShop(ctx, req.(*DianpingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DianpingRefreshTuanGou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DianpingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DianpingRefreshTuanGou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DianpingRefreshTuanGou_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DianpingRefreshTuanGou(ctx, req.(*DianpingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendSeatBookSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendSeatBookSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SendSeatBookSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendSeatBookSubscribe(ctx, req.(*BookingSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ExecProfitSharingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ExecProfitSharingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ExecProfitSharingOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ExecProfitSharingOrder(ctx, req.(*ProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateProfitSharingOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateProfitSharingOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateProfitSharingOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateProfitSharingOrderStatus(ctx, req.(*ProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SendCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendCoupon(ctx, req.(*SendCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StudentChangeCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentChangeCheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StudentChangeCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_StudentChangeCheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StudentChangeCheckIn(ctx, req.(*StudentChangeCheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookingValidate",
			Handler:    _Admin_BookingValidate_Handler,
		},
		{
			MethodName: "Booking",
			Handler:    _Admin_Booking_Handler,
		},
		{
			MethodName: "BookingChangeSeat",
			Handler:    _Admin_BookingChangeSeat_Handler,
		},
		{
			MethodName: "BookingAddTime",
			Handler:    _Admin_BookingAddTime_Handler,
		},
		{
			MethodName: "BookingChangeStatus",
			Handler:    _Admin_BookingChangeStatus_Handler,
		},
		{
			MethodName: "BookingOpenDoor",
			Handler:    _Admin_BookingOpenDoor_Handler,
		},
		{
			MethodName: "BookingControlLight",
			Handler:    _Admin_BookingControlLight_Handler,
		},
		{
			MethodName: "DianpingRefreshShop",
			Handler:    _Admin_DianpingRefreshShop_Handler,
		},
		{
			MethodName: "DianpingRefreshTuanGou",
			Handler:    _Admin_DianpingRefreshTuanGou_Handler,
		},
		{
			MethodName: "SendSeatBookSubscribe",
			Handler:    _Admin_SendSeatBookSubscribe_Handler,
		},
		{
			MethodName: "ExecProfitSharingOrder",
			Handler:    _Admin_ExecProfitSharingOrder_Handler,
		},
		{
			MethodName: "UpdateProfitSharingOrderStatus",
			Handler:    _Admin_UpdateProfitSharingOrderStatus_Handler,
		},
		{
			MethodName: "SendCoupon",
			Handler:    _Admin_SendCoupon_Handler,
		},
		{
			MethodName: "StudentChangeCheckIn",
			Handler:    _Admin_StudentChangeCheckIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
