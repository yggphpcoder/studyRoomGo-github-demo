// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.3
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminBooking = "/api.admin.v1.Admin/Booking"
const OperationAdminBookingAddTime = "/api.admin.v1.Admin/BookingAddTime"
const OperationAdminBookingChangeSeat = "/api.admin.v1.Admin/BookingChangeSeat"
const OperationAdminBookingChangeStatus = "/api.admin.v1.Admin/BookingChangeStatus"
const OperationAdminBookingControlLight = "/api.admin.v1.Admin/BookingControlLight"
const OperationAdminBookingOpenDoor = "/api.admin.v1.Admin/BookingOpenDoor"
const OperationAdminBookingValidate = "/api.admin.v1.Admin/BookingValidate"

type AdminHTTPServer interface {
	Booking(context.Context, *BookingRequest) (*BookingReply, error)
	BookingAddTime(context.Context, *BookingAddTimeRequest) (*BookingReply, error)
	BookingChangeSeat(context.Context, *BookingChangeSeatRequest) (*BookingReply, error)
	BookingChangeStatus(context.Context, *BookingChangeStatusRequest) (*BookingReply, error)
	BookingControlLight(context.Context, *BookingControlSeatRequest) (*BookingReply, error)
	BookingOpenDoor(context.Context, *BookingOpenDoorRequest) (*BookingReply, error)
	BookingValidate(context.Context, *BookingRequest) (*BookingValidateReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/seat/v1/booking_validate", _Admin_BookingValidate1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking", _Admin_Booking1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking_change_seat", _Admin_BookingChangeSeat1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking_add_time", _Admin_BookingAddTime1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking_change_status", _Admin_BookingChangeStatus1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking_open_door", _Admin_BookingOpenDoor1_HTTP_Handler(srv))
	r.POST("/seat/v1/booking_control_light", _Admin_BookingControlLight1_HTTP_Handler(srv))
}

func _Admin_BookingValidate1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingValidate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingValidate(ctx, req.(*BookingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingValidateReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Booking1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBooking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Booking(ctx, req.(*BookingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BookingChangeSeat1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingChangeSeatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingChangeSeat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingChangeSeat(ctx, req.(*BookingChangeSeatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BookingAddTime1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingAddTimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingAddTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingAddTime(ctx, req.(*BookingAddTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BookingChangeStatus1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingChangeStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingChangeStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingChangeStatus(ctx, req.(*BookingChangeStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BookingOpenDoor1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingOpenDoorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingOpenDoor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingOpenDoor(ctx, req.(*BookingOpenDoorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BookingControlLight1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BookingControlSeatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBookingControlLight)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BookingControlLight(ctx, req.(*BookingControlSeatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BookingReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	Booking(ctx context.Context, req *BookingRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingAddTime(ctx context.Context, req *BookingAddTimeRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingChangeSeat(ctx context.Context, req *BookingChangeSeatRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingChangeStatus(ctx context.Context, req *BookingChangeStatusRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingControlLight(ctx context.Context, req *BookingControlSeatRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingOpenDoor(ctx context.Context, req *BookingOpenDoorRequest, opts ...http.CallOption) (rsp *BookingReply, err error)
	BookingValidate(ctx context.Context, req *BookingRequest, opts ...http.CallOption) (rsp *BookingValidateReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) Booking(ctx context.Context, in *BookingRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBooking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingAddTime(ctx context.Context, in *BookingAddTimeRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking_add_time"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingAddTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingChangeSeat(ctx context.Context, in *BookingChangeSeatRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking_change_seat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingChangeSeat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingChangeStatus(ctx context.Context, in *BookingChangeStatusRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking_change_status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingChangeStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingControlLight(ctx context.Context, in *BookingControlSeatRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking_control_light"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingControlLight))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingOpenDoor(ctx context.Context, in *BookingOpenDoorRequest, opts ...http.CallOption) (*BookingReply, error) {
	var out BookingReply
	pattern := "/seat/v1/booking_open_door"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingOpenDoor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BookingValidate(ctx context.Context, in *BookingRequest, opts ...http.CallOption) (*BookingValidateReply, error) {
	var out BookingValidateReply
	pattern := "/seat/v1/booking_validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBookingValidate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
