// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: seat/v1/seat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Seat_Create_FullMethodName                    = "/api.seat.v1.Seat/Create"
	Seat_Update_FullMethodName                    = "/api.seat.v1.Seat/Update"
	Seat_Delete_FullMethodName                    = "/api.seat.v1.Seat/Delete"
	Seat_Get_FullMethodName                       = "/api.seat.v1.Seat/Get"
	Seat_Find_FullMethodName                      = "/api.seat.v1.Seat/Find"
	Seat_List_FullMethodName                      = "/api.seat.v1.Seat/List"
	Seat_Search_FullMethodName                    = "/api.seat.v1.Seat/Search"
	Seat_Overview_FullMethodName                  = "/api.seat.v1.Seat/Overview"
	Seat_BookingValidate_FullMethodName           = "/api.seat.v1.Seat/BookingValidate"
	Seat_Booking_FullMethodName                   = "/api.seat.v1.Seat/Booking"
	Seat_BookingChangeSeat_FullMethodName         = "/api.seat.v1.Seat/BookingChangeSeat"
	Seat_BookingAddTime_FullMethodName            = "/api.seat.v1.Seat/BookingAddTime"
	Seat_BookingChangeStatus_FullMethodName       = "/api.seat.v1.Seat/BookingChangeStatus"
	Seat_BookingOpenDoor_FullMethodName           = "/api.seat.v1.Seat/BookingOpenDoor"
	Seat_BookingControlLight_FullMethodName       = "/api.seat.v1.Seat/BookingControlLight"
	Seat_BookingShareGenToken_FullMethodName      = "/api.seat.v1.Seat/BookingShareGenToken"
	Seat_BookingOpenDoorShared_FullMethodName     = "/api.seat.v1.Seat/BookingOpenDoorShared"
	Seat_BookingControlLightShared_FullMethodName = "/api.seat.v1.Seat/BookingControlLightShared"
	Seat_LockingOpenDoor_FullMethodName           = "/api.seat.v1.Seat/LockingOpenDoor"
	Seat_LockingControlLight_FullMethodName       = "/api.seat.v1.Seat/LockingControlLight"
)

// SeatClient is the client API for Seat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error)
	Overview(ctx context.Context, in *OverviewRequest, opts ...grpc.CallOption) (*OverviewReply, error)
	BookingValidate(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingValidateReply, error)
	Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingChangeSeat(ctx context.Context, in *BookingChangeSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingAddTime(ctx context.Context, in *BookingAddTimeRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingChangeStatus(ctx context.Context, in *BookingChangeStatusRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingOpenDoor(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingControlLight(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingShareGenToken(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingGenSharekDataReply, error)
	BookingOpenDoorShared(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error)
	BookingControlLightShared(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
	LockingOpenDoor(ctx context.Context, in *LockingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error)
	LockingControlLight(ctx context.Context, in *LockingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error)
}

type seatClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatClient(cc grpc.ClientConnInterface) SeatClient {
	return &seatClient{cc}
}

func (c *seatClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, Seat_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, Seat_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, Seat_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Seat_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Seat_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Seat_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Seat_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Overview(ctx context.Context, in *OverviewRequest, opts ...grpc.CallOption) (*OverviewReply, error) {
	out := new(OverviewReply)
	err := c.cc.Invoke(ctx, Seat_Overview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingValidate(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingValidateReply, error) {
	out := new(BookingValidateReply)
	err := c.cc.Invoke(ctx, Seat_BookingValidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_Booking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingChangeSeat(ctx context.Context, in *BookingChangeSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingChangeSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingAddTime(ctx context.Context, in *BookingAddTimeRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingAddTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingChangeStatus(ctx context.Context, in *BookingChangeStatusRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingOpenDoor(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingOpenDoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingControlLight(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingControlLight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingShareGenToken(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingGenSharekDataReply, error) {
	out := new(BookingGenSharekDataReply)
	err := c.cc.Invoke(ctx, Seat_BookingShareGenToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingOpenDoorShared(ctx context.Context, in *BookingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingOpenDoorShared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) BookingControlLightShared(ctx context.Context, in *BookingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_BookingControlLightShared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) LockingOpenDoor(ctx context.Context, in *LockingOpenDoorRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_LockingOpenDoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatClient) LockingControlLight(ctx context.Context, in *LockingControlSeatRequest, opts ...grpc.CallOption) (*BookingReply, error) {
	out := new(BookingReply)
	err := c.cc.Invoke(ctx, Seat_LockingControlLight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatServer is the server API for Seat service.
// All implementations must embed UnimplementedSeatServer
// for forward compatibility
type SeatServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Get(context.Context, *GetRequest) (*DataReply, error)
	Find(context.Context, *FindRequest) (*DataReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Search(context.Context, *SearchRequest) (*ListReply, error)
	Overview(context.Context, *OverviewRequest) (*OverviewReply, error)
	BookingValidate(context.Context, *BookingRequest) (*BookingValidateReply, error)
	Booking(context.Context, *BookingRequest) (*BookingReply, error)
	BookingChangeSeat(context.Context, *BookingChangeSeatRequest) (*BookingReply, error)
	BookingAddTime(context.Context, *BookingAddTimeRequest) (*BookingReply, error)
	BookingChangeStatus(context.Context, *BookingChangeStatusRequest) (*BookingReply, error)
	BookingOpenDoor(context.Context, *BookingOpenDoorRequest) (*BookingReply, error)
	BookingControlLight(context.Context, *BookingControlSeatRequest) (*BookingReply, error)
	BookingShareGenToken(context.Context, *BookingControlSeatRequest) (*BookingGenSharekDataReply, error)
	BookingOpenDoorShared(context.Context, *BookingOpenDoorRequest) (*BookingReply, error)
	BookingControlLightShared(context.Context, *BookingControlSeatRequest) (*BookingReply, error)
	LockingOpenDoor(context.Context, *LockingOpenDoorRequest) (*BookingReply, error)
	LockingControlLight(context.Context, *LockingControlSeatRequest) (*BookingReply, error)
	mustEmbedUnimplementedSeatServer()
}

// UnimplementedSeatServer must be embedded to have forward compatible implementations.
type UnimplementedSeatServer struct {
}

func (UnimplementedSeatServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSeatServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSeatServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSeatServer) Get(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSeatServer) Find(context.Context, *FindRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedSeatServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSeatServer) Search(context.Context, *SearchRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSeatServer) Overview(context.Context, *OverviewRequest) (*OverviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overview not implemented")
}
func (UnimplementedSeatServer) BookingValidate(context.Context, *BookingRequest) (*BookingValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingValidate not implemented")
}
func (UnimplementedSeatServer) Booking(context.Context, *BookingRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Booking not implemented")
}
func (UnimplementedSeatServer) BookingChangeSeat(context.Context, *BookingChangeSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingChangeSeat not implemented")
}
func (UnimplementedSeatServer) BookingAddTime(context.Context, *BookingAddTimeRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingAddTime not implemented")
}
func (UnimplementedSeatServer) BookingChangeStatus(context.Context, *BookingChangeStatusRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingChangeStatus not implemented")
}
func (UnimplementedSeatServer) BookingOpenDoor(context.Context, *BookingOpenDoorRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingOpenDoor not implemented")
}
func (UnimplementedSeatServer) BookingControlLight(context.Context, *BookingControlSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingControlLight not implemented")
}
func (UnimplementedSeatServer) BookingShareGenToken(context.Context, *BookingControlSeatRequest) (*BookingGenSharekDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingShareGenToken not implemented")
}
func (UnimplementedSeatServer) BookingOpenDoorShared(context.Context, *BookingOpenDoorRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingOpenDoorShared not implemented")
}
func (UnimplementedSeatServer) BookingControlLightShared(context.Context, *BookingControlSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingControlLightShared not implemented")
}
func (UnimplementedSeatServer) LockingOpenDoor(context.Context, *LockingOpenDoorRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockingOpenDoor not implemented")
}
func (UnimplementedSeatServer) LockingControlLight(context.Context, *LockingControlSeatRequest) (*BookingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockingControlLight not implemented")
}
func (UnimplementedSeatServer) mustEmbedUnimplementedSeatServer() {}

// UnsafeSeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatServer will
// result in compilation errors.
type UnsafeSeatServer interface {
	mustEmbedUnimplementedSeatServer()
}

func RegisterSeatServer(s grpc.ServiceRegistrar, srv SeatServer) {
	s.RegisterService(&Seat_ServiceDesc, srv)
}

func _Seat_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Overview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Overview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Overview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Overview(ctx, req.(*OverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingValidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingValidate(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_Booking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).Booking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_Booking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).Booking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingChangeSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingChangeSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingChangeSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingChangeSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingChangeSeat(ctx, req.(*BookingChangeSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingAddTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingAddTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingAddTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingAddTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingAddTime(ctx, req.(*BookingAddTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingChangeStatus(ctx, req.(*BookingChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingOpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingOpenDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingOpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingOpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingOpenDoor(ctx, req.(*BookingOpenDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingControlLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingControlSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingControlLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingControlLight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingControlLight(ctx, req.(*BookingControlSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingShareGenToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingControlSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingShareGenToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingShareGenToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingShareGenToken(ctx, req.(*BookingControlSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingOpenDoorShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingOpenDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingOpenDoorShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingOpenDoorShared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingOpenDoorShared(ctx, req.(*BookingOpenDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_BookingControlLightShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingControlSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).BookingControlLightShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_BookingControlLightShared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).BookingControlLightShared(ctx, req.(*BookingControlSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_LockingOpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockingOpenDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).LockingOpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_LockingOpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).LockingOpenDoor(ctx, req.(*LockingOpenDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seat_LockingControlLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockingControlSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServer).LockingControlLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seat_LockingControlLight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServer).LockingControlLight(ctx, req.(*LockingControlSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Seat_ServiceDesc is the grpc.ServiceDesc for Seat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.seat.v1.Seat",
	HandlerType: (*SeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Seat_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Seat_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Seat_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Seat_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Seat_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Seat_List_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Seat_Search_Handler,
		},
		{
			MethodName: "Overview",
			Handler:    _Seat_Overview_Handler,
		},
		{
			MethodName: "BookingValidate",
			Handler:    _Seat_BookingValidate_Handler,
		},
		{
			MethodName: "Booking",
			Handler:    _Seat_Booking_Handler,
		},
		{
			MethodName: "BookingChangeSeat",
			Handler:    _Seat_BookingChangeSeat_Handler,
		},
		{
			MethodName: "BookingAddTime",
			Handler:    _Seat_BookingAddTime_Handler,
		},
		{
			MethodName: "BookingChangeStatus",
			Handler:    _Seat_BookingChangeStatus_Handler,
		},
		{
			MethodName: "BookingOpenDoor",
			Handler:    _Seat_BookingOpenDoor_Handler,
		},
		{
			MethodName: "BookingControlLight",
			Handler:    _Seat_BookingControlLight_Handler,
		},
		{
			MethodName: "BookingShareGenToken",
			Handler:    _Seat_BookingShareGenToken_Handler,
		},
		{
			MethodName: "BookingOpenDoorShared",
			Handler:    _Seat_BookingOpenDoorShared_Handler,
		},
		{
			MethodName: "BookingControlLightShared",
			Handler:    _Seat_BookingControlLightShared_Handler,
		},
		{
			MethodName: "LockingOpenDoor",
			Handler:    _Seat_LockingOpenDoor_Handler,
		},
		{
			MethodName: "LockingControlLight",
			Handler:    _Seat_LockingControlLight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seat/v1/seat.proto",
}
