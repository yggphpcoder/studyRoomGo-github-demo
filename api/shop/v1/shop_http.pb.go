// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: shop/v1/shop.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopFind = "/api.shop.v1.Shop/Find"
const OperationShopGet = "/api.shop.v1.Shop/Get"
const OperationShopSearch = "/api.shop.v1.Shop/Search"
const OperationShopuploadQrCode = "/api.shop.v1.Shop/uploadQrCode"

type ShopHTTPServer interface {
	Find(context.Context, *FindRequest) (*DataReply, error)
	Get(context.Context, *GetRequest) (*DataReply, error)
	Search(context.Context, *SearchRequest) (*ListReply, error)
	UploadQrCode(context.Context, *UploadQrCodeRequest) (*QrCodeReply, error)
}

func RegisterShopHTTPServer(s *http.Server, srv ShopHTTPServer) {
	r := s.Route("/")
	r.GET("/shop/v1/shop/{id}", _Shop_Get3_HTTP_Handler(srv))
	r.GET("/shop/v1/find", _Shop_Find3_HTTP_Handler(srv))
	r.GET("/shop/v1/search", _Shop_Search3_HTTP_Handler(srv))
	r.POST("/shop/v1/upload_qrcode", _Shop_UploadQrCode0_HTTP_Handler(srv))
}

func _Shop_Get3_HTTP_Handler(srv ShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Shop_Find3_HTTP_Handler(srv ShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopFind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*FindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Shop_Search3_HTTP_Handler(srv ShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Shop_UploadQrCode0_HTTP_Handler(srv ShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadQrCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopuploadQrCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadQrCode(ctx, req.(*UploadQrCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QrCodeReply)
		return ctx.Result(200, reply)
	}
}

type ShopHTTPClient interface {
	Find(ctx context.Context, req *FindRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	Search(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	UploadQrCode(ctx context.Context, req *UploadQrCodeRequest, opts ...http.CallOption) (rsp *QrCodeReply, err error)
}

type ShopHTTPClientImpl struct {
	cc *http.Client
}

func NewShopHTTPClient(client *http.Client) ShopHTTPClient {
	return &ShopHTTPClientImpl{client}
}

func (c *ShopHTTPClientImpl) Find(ctx context.Context, in *FindRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/shop/v1/find"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopFind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/shop/v1/shop/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopHTTPClientImpl) Search(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/shop/v1/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopHTTPClientImpl) UploadQrCode(ctx context.Context, in *UploadQrCodeRequest, opts ...http.CallOption) (*QrCodeReply, error) {
	var out QrCodeReply
	pattern := "/shop/v1/upload_qrcode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopuploadQrCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
