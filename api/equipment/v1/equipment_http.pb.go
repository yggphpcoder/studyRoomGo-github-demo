// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: equipment/v1/equipment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEquipmentAutomate = "/api.equipment.v1.Equipment/Automate"
const OperationEquipmentAutomateAll = "/api.equipment.v1.Equipment/AutomateAll"
const OperationEquipmentAutomateMain = "/api.equipment.v1.Equipment/AutomateMain"
const OperationEquipmentList = "/api.equipment.v1.Equipment/List"
const OperationEquipmentLiverCameraList = "/api.equipment.v1.Equipment/LiverCameraList"
const OperationEquipmentOpenDoor = "/api.equipment.v1.Equipment/OpenDoor"

type EquipmentHTTPServer interface {
	Automate(context.Context, *GetRequest) (*DataReply, error)
	AutomateAll(context.Context, *ListRequest) (*ListReply, error)
	AutomateMain(context.Context, *ListRequest) (*ListReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	LiverCameraList(context.Context, *ListRequest) (*LiverCameraListReply, error)
	OpenDoor(context.Context, *GetRequest) (*DataReply, error)
}

func RegisterEquipmentHTTPServer(s *http.Server, srv EquipmentHTTPServer) {
	r := s.Route("/")
	r.POST("/equipment/v1/openDoor/{id}", _Equipment_OpenDoor0_HTTP_Handler(srv))
	r.POST("/equipment/v1/equipment/{id}", _Equipment_Automate0_HTTP_Handler(srv))
	r.POST("/equipment/v1/equipment/shop/{shopId}", _Equipment_AutomateAll0_HTTP_Handler(srv))
	r.POST("/equipment/v1/equipment/main/{pId}", _Equipment_AutomateMain0_HTTP_Handler(srv))
	r.GET("/equipment/v1/list", _Equipment_List3_HTTP_Handler(srv))
	r.GET("/equipment/v1/liverCameraList", _Equipment_LiverCameraList0_HTTP_Handler(srv))
}

func _Equipment_OpenDoor0_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentOpenDoor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenDoor(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Equipment_Automate0_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentAutomate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Automate(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Equipment_AutomateAll0_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentAutomateAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AutomateAll(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Equipment_AutomateMain0_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentAutomateMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AutomateMain(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Equipment_List3_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Equipment_LiverCameraList0_HTTP_Handler(srv EquipmentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEquipmentLiverCameraList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LiverCameraList(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LiverCameraListReply)
		return ctx.Result(200, reply)
	}
}

type EquipmentHTTPClient interface {
	Automate(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	AutomateAll(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	AutomateMain(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	LiverCameraList(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *LiverCameraListReply, err error)
	OpenDoor(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataReply, err error)
}

type EquipmentHTTPClientImpl struct {
	cc *http.Client
}

func NewEquipmentHTTPClient(client *http.Client) EquipmentHTTPClient {
	return &EquipmentHTTPClientImpl{client}
}

func (c *EquipmentHTTPClientImpl) Automate(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/equipment/v1/equipment/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEquipmentAutomate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EquipmentHTTPClientImpl) AutomateAll(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/equipment/v1/equipment/shop/{shopId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEquipmentAutomateAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EquipmentHTTPClientImpl) AutomateMain(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/equipment/v1/equipment/main/{pId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEquipmentAutomateMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EquipmentHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/equipment/v1/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEquipmentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EquipmentHTTPClientImpl) LiverCameraList(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*LiverCameraListReply, error) {
	var out LiverCameraListReply
	pattern := "/equipment/v1/liverCameraList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEquipmentLiverCameraList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EquipmentHTTPClientImpl) OpenDoor(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/equipment/v1/openDoor/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEquipmentOpenDoor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
