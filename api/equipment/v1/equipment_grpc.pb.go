// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: equipment/v1/equipment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Equipment_OpenDoor_FullMethodName        = "/api.equipment.v1.Equipment/OpenDoor"
	Equipment_Automate_FullMethodName        = "/api.equipment.v1.Equipment/Automate"
	Equipment_AutomateAll_FullMethodName     = "/api.equipment.v1.Equipment/AutomateAll"
	Equipment_AutomateMain_FullMethodName    = "/api.equipment.v1.Equipment/AutomateMain"
	Equipment_List_FullMethodName            = "/api.equipment.v1.Equipment/List"
	Equipment_SeatAutomate_FullMethodName    = "/api.equipment.v1.Equipment/SeatAutomate"
	Equipment_DoorAutomate_FullMethodName    = "/api.equipment.v1.Equipment/DoorAutomate"
	Equipment_LiverCameraList_FullMethodName = "/api.equipment.v1.Equipment/LiverCameraList"
)

// EquipmentClient is the client API for Equipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentClient interface {
	OpenDoor(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	Automate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	AutomateAll(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	AutomateMain(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	// 后台专用
	SeatAutomate(ctx context.Context, in *SeatAutomateRequest, opts ...grpc.CallOption) (*DataReply, error)
	DoorAutomate(ctx context.Context, in *DoorAutomateRequest, opts ...grpc.CallOption) (*DataReply, error)
	LiverCameraList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*LiverCameraListReply, error)
}

type equipmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentClient(cc grpc.ClientConnInterface) EquipmentClient {
	return &equipmentClient{cc}
}

func (c *equipmentClient) OpenDoor(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Equipment_OpenDoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) Automate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Equipment_Automate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) AutomateAll(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Equipment_AutomateAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) AutomateMain(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Equipment_AutomateMain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Equipment_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) SeatAutomate(ctx context.Context, in *SeatAutomateRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Equipment_SeatAutomate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) DoorAutomate(ctx context.Context, in *DoorAutomateRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Equipment_DoorAutomate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) LiverCameraList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*LiverCameraListReply, error) {
	out := new(LiverCameraListReply)
	err := c.cc.Invoke(ctx, Equipment_LiverCameraList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServer is the server API for Equipment service.
// All implementations must embed UnimplementedEquipmentServer
// for forward compatibility
type EquipmentServer interface {
	OpenDoor(context.Context, *GetRequest) (*DataReply, error)
	Automate(context.Context, *GetRequest) (*DataReply, error)
	AutomateAll(context.Context, *ListRequest) (*ListReply, error)
	AutomateMain(context.Context, *ListRequest) (*ListReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	// 后台专用
	SeatAutomate(context.Context, *SeatAutomateRequest) (*DataReply, error)
	DoorAutomate(context.Context, *DoorAutomateRequest) (*DataReply, error)
	LiverCameraList(context.Context, *ListRequest) (*LiverCameraListReply, error)
	mustEmbedUnimplementedEquipmentServer()
}

// UnimplementedEquipmentServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentServer struct {
}

func (UnimplementedEquipmentServer) OpenDoor(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDoor not implemented")
}
func (UnimplementedEquipmentServer) Automate(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Automate not implemented")
}
func (UnimplementedEquipmentServer) AutomateAll(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomateAll not implemented")
}
func (UnimplementedEquipmentServer) AutomateMain(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomateMain not implemented")
}
func (UnimplementedEquipmentServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEquipmentServer) SeatAutomate(context.Context, *SeatAutomateRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeatAutomate not implemented")
}
func (UnimplementedEquipmentServer) DoorAutomate(context.Context, *DoorAutomateRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoorAutomate not implemented")
}
func (UnimplementedEquipmentServer) LiverCameraList(context.Context, *ListRequest) (*LiverCameraListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiverCameraList not implemented")
}
func (UnimplementedEquipmentServer) mustEmbedUnimplementedEquipmentServer() {}

// UnsafeEquipmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServer will
// result in compilation errors.
type UnsafeEquipmentServer interface {
	mustEmbedUnimplementedEquipmentServer()
}

func RegisterEquipmentServer(s grpc.ServiceRegistrar, srv EquipmentServer) {
	s.RegisterService(&Equipment_ServiceDesc, srv)
}

func _Equipment_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_OpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).OpenDoor(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_Automate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).Automate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_Automate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).Automate(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_AutomateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).AutomateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_AutomateAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).AutomateAll(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_AutomateMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).AutomateMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_AutomateMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).AutomateMain(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_SeatAutomate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatAutomateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).SeatAutomate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_SeatAutomate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).SeatAutomate(ctx, req.(*SeatAutomateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_DoorAutomate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoorAutomateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).DoorAutomate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_DoorAutomate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).DoorAutomate(ctx, req.(*DoorAutomateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_LiverCameraList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).LiverCameraList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_LiverCameraList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).LiverCameraList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Equipment_ServiceDesc is the grpc.ServiceDesc for Equipment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Equipment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.equipment.v1.Equipment",
	HandlerType: (*EquipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDoor",
			Handler:    _Equipment_OpenDoor_Handler,
		},
		{
			MethodName: "Automate",
			Handler:    _Equipment_Automate_Handler,
		},
		{
			MethodName: "AutomateAll",
			Handler:    _Equipment_AutomateAll_Handler,
		},
		{
			MethodName: "AutomateMain",
			Handler:    _Equipment_AutomateMain_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Equipment_List_Handler,
		},
		{
			MethodName: "SeatAutomate",
			Handler:    _Equipment_SeatAutomate_Handler,
		},
		{
			MethodName: "DoorAutomate",
			Handler:    _Equipment_DoorAutomate_Handler,
		},
		{
			MethodName: "LiverCameraList",
			Handler:    _Equipment_LiverCameraList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equipment/v1/equipment.proto",
}
