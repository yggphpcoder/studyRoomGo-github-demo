// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.3
// source: course/v1/course.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{1}
}

func (x *FindRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FindRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{2}
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseShop      string `protobuf:"bytes,1,opt,name=useShop,proto3" json:"useShop,omitempty"`
	TeachingType int32  `protobuf:"varint,2,opt,name=teachingType,proto3" json:"teachingType,omitempty"`
	CourseType   int32  `protobuf:"varint,3,opt,name=courseType,proto3" json:"courseType,omitempty"`
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Sort         int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{3}
}

func (x *SearchRequest) GetUseShop() string {
	if x != nil {
		return x.UseShop
	}
	return ""
}

func (x *SearchRequest) GetTeachingType() int32 {
	if x != nil {
		return x.TeachingType
	}
	return 0
}

func (x *SearchRequest) GetCourseType() int32 {
	if x != nil {
		return x.CourseType
	}
	return 0
}

func (x *SearchRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type DataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Data  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataReply) Reset() {
	*x = DataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReply) ProtoMessage() {}

func (x *DataReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReply.ProtoReflect.Descriptor instead.
func (*DataReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{4}
}

func (x *DataReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DataReply) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{5}
}

func (x *ListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListReply) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TeachingType int32   `protobuf:"varint,2,opt,name=teachingType,proto3" json:"teachingType,omitempty"`
	CourseType   int32   `protobuf:"varint,3,opt,name=courseType,proto3" json:"courseType,omitempty"`
	BuyLimit     int32   `protobuf:"varint,4,opt,name=buyLimit,proto3" json:"buyLimit,omitempty"`
	CourseSize   int32   `protobuf:"varint,5,opt,name=courseSize,proto3" json:"courseSize,omitempty"`
	Title        string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Cover        string  `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`
	Carousel     string  `protobuf:"bytes,8,opt,name=carousel,proto3" json:"carousel,omitempty"`
	Summary      string  `protobuf:"bytes,9,opt,name=summary,proto3" json:"summary,omitempty"`
	Content      string  `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	StartDate    string  `protobuf:"bytes,11,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      string  `protobuf:"bytes,12,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Status       int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	UseShop      string  `protobuf:"bytes,14,opt,name=useShop,proto3" json:"useShop,omitempty"`
	Sort         int32   `protobuf:"varint,15,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark       string  `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`
	Sale         []*Sale `protobuf:"bytes,18,rep,name=sale,proto3" json:"sale,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{6}
}

func (x *Data) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Data) GetTeachingType() int32 {
	if x != nil {
		return x.TeachingType
	}
	return 0
}

func (x *Data) GetCourseType() int32 {
	if x != nil {
		return x.CourseType
	}
	return 0
}

func (x *Data) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *Data) GetCourseSize() int32 {
	if x != nil {
		return x.CourseSize
	}
	return 0
}

func (x *Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Data) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Data) GetCarousel() string {
	if x != nil {
		return x.Carousel
	}
	return ""
}

func (x *Data) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Data) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Data) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Data) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Data) GetUseShop() string {
	if x != nil {
		return x.UseShop
	}
	return ""
}

func (x *Data) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Data) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Data) GetSale() []*Sale {
	if x != nil {
		return x.Sale
	}
	return nil
}

type Sale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UseShop     string  `protobuf:"bytes,2,opt,name=useShop,proto3" json:"useShop,omitempty"`
	Status      int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Rule        string  `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty"`
	Price       float32 `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	OriPrice    float32 `protobuf:"fixed32,7,opt,name=oriPrice,proto3" json:"oriPrice,omitempty"`
	BuyLimit    int32   `protobuf:"varint,8,opt,name=buyLimit,proto3" json:"buyLimit,omitempty"`
	StartDate   string  `protobuf:"bytes,9,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate     string  `protobuf:"bytes,10,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ValidDay    int32   `protobuf:"varint,11,opt,name=validDay,proto3" json:"validDay,omitempty"`
	ActiveLimit int32   `protobuf:"varint,12,opt,name=activeLimit,proto3" json:"activeLimit,omitempty"`
	Sort        int32   `protobuf:"varint,13,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark      string  `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *Sale) Reset() {
	*x = Sale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sale) ProtoMessage() {}

func (x *Sale) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sale.ProtoReflect.Descriptor instead.
func (*Sale) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{7}
}

func (x *Sale) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sale) GetUseShop() string {
	if x != nil {
		return x.UseShop
	}
	return ""
}

func (x *Sale) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Sale) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Sale) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *Sale) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sale) GetOriPrice() float32 {
	if x != nil {
		return x.OriPrice
	}
	return 0
}

func (x *Sale) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *Sale) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Sale) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Sale) GetValidDay() int32 {
	if x != nil {
		return x.ValidDay
	}
	return 0
}

func (x *Sale) GetActiveLimit() int32 {
	if x != nil {
		return x.ActiveLimit
	}
	return 0
}

func (x *Sale) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Sale) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type MyStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StudentId int64  `protobuf:"varint,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	Photo     string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Phone     string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender    int32  `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
}

func (x *MyStudentRequest) Reset() {
	*x = MyStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentRequest) ProtoMessage() {}

func (x *MyStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentRequest.ProtoReflect.Descriptor instead.
func (*MyStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{8}
}

func (x *MyStudentRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyStudentRequest) GetStudentId() int64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *MyStudentRequest) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *MyStudentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MyStudentRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MyStudentRequest) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

type MyStudentDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MyStudentData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MyStudentDataReply) Reset() {
	*x = MyStudentDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentDataReply) ProtoMessage() {}

func (x *MyStudentDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentDataReply.ProtoReflect.Descriptor instead.
func (*MyStudentDataReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{9}
}

func (x *MyStudentDataReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyStudentDataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyStudentDataReply) GetData() *MyStudentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyStudentDataListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*MyStudentData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MyStudentDataListReply) Reset() {
	*x = MyStudentDataListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentDataListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentDataListReply) ProtoMessage() {}

func (x *MyStudentDataListReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentDataListReply.ProtoReflect.Descriptor instead.
func (*MyStudentDataListReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{10}
}

func (x *MyStudentDataListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyStudentDataListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyStudentDataListReply) GetData() []*MyStudentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyStudentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StudentId int64  `protobuf:"varint,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone     string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender    int32  `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Photo     string `protobuf:"bytes,6,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (x *MyStudentData) Reset() {
	*x = MyStudentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentData) ProtoMessage() {}

func (x *MyStudentData) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentData.ProtoReflect.Descriptor instead.
func (*MyStudentData) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{11}
}

func (x *MyStudentData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyStudentData) GetStudentId() int64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *MyStudentData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MyStudentData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MyStudentData) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *MyStudentData) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

type MyStudentCourseDataListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*MyStudentCourseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MyStudentCourseDataListReply) Reset() {
	*x = MyStudentCourseDataListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentCourseDataListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentCourseDataListReply) ProtoMessage() {}

func (x *MyStudentCourseDataListReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentCourseDataListReply.ProtoReflect.Descriptor instead.
func (*MyStudentCourseDataListReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{12}
}

func (x *MyStudentCourseDataListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyStudentCourseDataListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyStudentCourseDataListReply) GetData() []*MyStudentCourseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyStudentCourseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	StudentId    int64   `protobuf:"varint,3,opt,name=studentId,proto3" json:"studentId,omitempty"`
	StudentName  string  `protobuf:"bytes,4,opt,name=studentName,proto3" json:"studentName,omitempty"`
	ActualAmount float32 `protobuf:"fixed32,5,opt,name=actualAmount,proto3" json:"actualAmount,omitempty"`
	Remain       int32   `protobuf:"varint,6,opt,name=remain,proto3" json:"remain,omitempty"`
	PerMin       int32   `protobuf:"varint,7,opt,name=perMin,proto3" json:"perMin,omitempty"`
	Status       int32   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CourseId     int64   `protobuf:"varint,9,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CourseType   int32   `protobuf:"varint,10,opt,name=courseType,proto3" json:"courseType,omitempty"`
	TeachingType int32   `protobuf:"varint,11,opt,name=teachingType,proto3" json:"teachingType,omitempty"`
	CourseSize   int32   `protobuf:"varint,12,opt,name=courseSize,proto3" json:"courseSize,omitempty"`
	StartDate    string  `protobuf:"bytes,13,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      string  `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Price        float32 `protobuf:"fixed32,15,opt,name=price,proto3" json:"price,omitempty"`
	OriPrice     float32 `protobuf:"fixed32,16,opt,name=oriPrice,proto3" json:"oriPrice,omitempty"`
	Remark       string  `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	ValidDay     int32   `protobuf:"varint,18,opt,name=validDay,proto3" json:"validDay,omitempty"`
	ActiveLimit  int32   `protobuf:"varint,19,opt,name=activeLimit,proto3" json:"activeLimit,omitempty"`
	ActiveAt     string  `protobuf:"bytes,20,opt,name=activeAt,proto3" json:"activeAt,omitempty"`
	InvalidAt    string  `protobuf:"bytes,21,opt,name=invalidAt,proto3" json:"invalidAt,omitempty"`
}

func (x *MyStudentCourseData) Reset() {
	*x = MyStudentCourseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStudentCourseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStudentCourseData) ProtoMessage() {}

func (x *MyStudentCourseData) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStudentCourseData.ProtoReflect.Descriptor instead.
func (*MyStudentCourseData) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{13}
}

func (x *MyStudentCourseData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyStudentCourseData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MyStudentCourseData) GetStudentId() int64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *MyStudentCourseData) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *MyStudentCourseData) GetActualAmount() float32 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *MyStudentCourseData) GetRemain() int32 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *MyStudentCourseData) GetPerMin() int32 {
	if x != nil {
		return x.PerMin
	}
	return 0
}

func (x *MyStudentCourseData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MyStudentCourseData) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *MyStudentCourseData) GetCourseType() int32 {
	if x != nil {
		return x.CourseType
	}
	return 0
}

func (x *MyStudentCourseData) GetTeachingType() int32 {
	if x != nil {
		return x.TeachingType
	}
	return 0
}

func (x *MyStudentCourseData) GetCourseSize() int32 {
	if x != nil {
		return x.CourseSize
	}
	return 0
}

func (x *MyStudentCourseData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MyStudentCourseData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MyStudentCourseData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MyStudentCourseData) GetOriPrice() float32 {
	if x != nil {
		return x.OriPrice
	}
	return 0
}

func (x *MyStudentCourseData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *MyStudentCourseData) GetValidDay() int32 {
	if x != nil {
		return x.ValidDay
	}
	return 0
}

func (x *MyStudentCourseData) GetActiveLimit() int32 {
	if x != nil {
		return x.ActiveLimit
	}
	return 0
}

func (x *MyStudentCourseData) GetActiveAt() string {
	if x != nil {
		return x.ActiveAt
	}
	return ""
}

func (x *MyStudentCourseData) GetInvalidAt() string {
	if x != nil {
		return x.InvalidAt
	}
	return ""
}

type MyCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StudentId int64  `protobuf:"varint,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	CourseId  int64  `protobuf:"varint,3,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Sort      int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Page      int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *MyCourseRequest) Reset() {
	*x = MyCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCourseRequest) ProtoMessage() {}

func (x *MyCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCourseRequest.ProtoReflect.Descriptor instead.
func (*MyCourseRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{14}
}

func (x *MyCourseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyCourseRequest) GetStudentId() int64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *MyCourseRequest) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *MyCourseRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MyCourseRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MyCourseRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MyCourseRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MyCourseSchedulingDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MyCourseSchedulingData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MyCourseSchedulingDataReply) Reset() {
	*x = MyCourseSchedulingDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCourseSchedulingDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCourseSchedulingDataReply) ProtoMessage() {}

func (x *MyCourseSchedulingDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCourseSchedulingDataReply.ProtoReflect.Descriptor instead.
func (*MyCourseSchedulingDataReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{15}
}

func (x *MyCourseSchedulingDataReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyCourseSchedulingDataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyCourseSchedulingDataReply) GetData() *MyCourseSchedulingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyCourseSchedulingDataListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*MyCourseSchedulingData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MyCourseSchedulingDataListReply) Reset() {
	*x = MyCourseSchedulingDataListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCourseSchedulingDataListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCourseSchedulingDataListReply) ProtoMessage() {}

func (x *MyCourseSchedulingDataListReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCourseSchedulingDataListReply.ProtoReflect.Descriptor instead.
func (*MyCourseSchedulingDataListReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{16}
}

func (x *MyCourseSchedulingDataListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyCourseSchedulingDataListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyCourseSchedulingDataListReply) GetData() []*MyCourseSchedulingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyCourseSchedulingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StudentId       int64  `protobuf:"varint,3,opt,name=studentId,proto3" json:"studentId,omitempty"`
	StudentName     string `protobuf:"bytes,4,opt,name=studentName,proto3" json:"studentName,omitempty"`
	StudentCourseId int64  `protobuf:"varint,5,opt,name=studentCourseId,proto3" json:"studentCourseId,omitempty"`
	CourseName      string `protobuf:"bytes,6,opt,name=courseName,proto3" json:"courseName,omitempty"`
	CourseType      int32  `protobuf:"varint,7,opt,name=courseType,proto3" json:"courseType,omitempty"`
	TeachingType    int32  `protobuf:"varint,8,opt,name=teachingType,proto3" json:"teachingType,omitempty"`
	ClassId         int64  `protobuf:"varint,9,opt,name=classId,proto3" json:"classId,omitempty"`
	ClassName       string `protobuf:"bytes,10,opt,name=className,proto3" json:"className,omitempty"`
	TeacherId       int64  `protobuf:"varint,11,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	TeacherName     string `protobuf:"bytes,12,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	StartDate       string `protobuf:"bytes,13,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	StartTime       string `protobuf:"bytes,15,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime         string `protobuf:"bytes,16,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Status          int32  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	CheckIn         int32  `protobuf:"varint,18,opt,name=checkIn,proto3" json:"checkIn,omitempty"`
	AddressId       int64  `protobuf:"varint,19,opt,name=addressId,proto3" json:"addressId,omitempty"`
	AddressName     string `protobuf:"bytes,20,opt,name=addressName,proto3" json:"addressName,omitempty"`
}

func (x *MyCourseSchedulingData) Reset() {
	*x = MyCourseSchedulingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCourseSchedulingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCourseSchedulingData) ProtoMessage() {}

func (x *MyCourseSchedulingData) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCourseSchedulingData.ProtoReflect.Descriptor instead.
func (*MyCourseSchedulingData) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{17}
}

func (x *MyCourseSchedulingData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyCourseSchedulingData) GetStudentId() int64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *MyCourseSchedulingData) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *MyCourseSchedulingData) GetStudentCourseId() int64 {
	if x != nil {
		return x.StudentCourseId
	}
	return 0
}

func (x *MyCourseSchedulingData) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *MyCourseSchedulingData) GetCourseType() int32 {
	if x != nil {
		return x.CourseType
	}
	return 0
}

func (x *MyCourseSchedulingData) GetTeachingType() int32 {
	if x != nil {
		return x.TeachingType
	}
	return 0
}

func (x *MyCourseSchedulingData) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *MyCourseSchedulingData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *MyCourseSchedulingData) GetTeacherId() int64 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *MyCourseSchedulingData) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *MyCourseSchedulingData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MyCourseSchedulingData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MyCourseSchedulingData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *MyCourseSchedulingData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *MyCourseSchedulingData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MyCourseSchedulingData) GetCheckIn() int32 {
	if x != nil {
		return x.CheckIn
	}
	return 0
}

func (x *MyCourseSchedulingData) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *MyCourseSchedulingData) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

type CourseSchedulingCheckInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckIn int32 `protobuf:"varint,2,opt,name=checkIn,proto3" json:"checkIn,omitempty"`
	Status  int32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CourseSchedulingCheckInRequest) Reset() {
	*x = CourseSchedulingCheckInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseSchedulingCheckInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseSchedulingCheckInRequest) ProtoMessage() {}

func (x *CourseSchedulingCheckInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseSchedulingCheckInRequest.ProtoReflect.Descriptor instead.
func (*CourseSchedulingCheckInRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{18}
}

func (x *CourseSchedulingCheckInRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourseSchedulingCheckInRequest) GetCheckIn() int32 {
	if x != nil {
		return x.CheckIn
	}
	return 0
}

func (x *CourseSchedulingCheckInRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ClassSchedulingCheckInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32                             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Course []*CourseSchedulingCheckInRequest `protobuf:"bytes,3,rep,name=course,proto3" json:"course,omitempty"`
}

func (x *ClassSchedulingCheckInRequest) Reset() {
	*x = ClassSchedulingCheckInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassSchedulingCheckInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassSchedulingCheckInRequest) ProtoMessage() {}

func (x *ClassSchedulingCheckInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassSchedulingCheckInRequest.ProtoReflect.Descriptor instead.
func (*ClassSchedulingCheckInRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{19}
}

func (x *ClassSchedulingCheckInRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClassSchedulingCheckInRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ClassSchedulingCheckInRequest) GetCourse() []*CourseSchedulingCheckInRequest {
	if x != nil {
		return x.Course
	}
	return nil
}

type MyClassSchedulingDataListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*MyClassSchedulingData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MyClassSchedulingDataListReply) Reset() {
	*x = MyClassSchedulingDataListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyClassSchedulingDataListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyClassSchedulingDataListReply) ProtoMessage() {}

func (x *MyClassSchedulingDataListReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyClassSchedulingDataListReply.ProtoReflect.Descriptor instead.
func (*MyClassSchedulingDataListReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{20}
}

func (x *MyClassSchedulingDataListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyClassSchedulingDataListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyClassSchedulingDataListReply) GetData() []*MyClassSchedulingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyClassSchedulingDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MyClassSchedulingData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MyClassSchedulingDataReply) Reset() {
	*x = MyClassSchedulingDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyClassSchedulingDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyClassSchedulingDataReply) ProtoMessage() {}

func (x *MyClassSchedulingDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyClassSchedulingDataReply.ProtoReflect.Descriptor instead.
func (*MyClassSchedulingDataReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{21}
}

func (x *MyClassSchedulingDataReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MyClassSchedulingDataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MyClassSchedulingDataReply) GetData() *MyClassSchedulingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyClassSchedulingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseName   string                                           `protobuf:"bytes,6,opt,name=courseName,proto3" json:"courseName,omitempty"`
	CourseType   int32                                            `protobuf:"varint,7,opt,name=courseType,proto3" json:"courseType,omitempty"`
	TeachingType int32                                            `protobuf:"varint,8,opt,name=teachingType,proto3" json:"teachingType,omitempty"`
	ClassId      int64                                            `protobuf:"varint,9,opt,name=classId,proto3" json:"classId,omitempty"`
	ClassName    string                                           `protobuf:"bytes,10,opt,name=className,proto3" json:"className,omitempty"`
	TeacherId    int64                                            `protobuf:"varint,11,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	TeacherName  string                                           `protobuf:"bytes,12,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	StartDate    string                                           `protobuf:"bytes,13,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      string                                           `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	StartTime    string                                           `protobuf:"bytes,15,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      string                                           `protobuf:"bytes,16,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Status       int32                                            `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	AddressId    int64                                            `protobuf:"varint,19,opt,name=addressId,proto3" json:"addressId,omitempty"`
	AddressName  string                                           `protobuf:"bytes,20,opt,name=addressName,proto3" json:"addressName,omitempty"`
	Course       []*MyClassSchedulingData_CourseSchedulingCheckIn `protobuf:"bytes,21,rep,name=course,proto3" json:"course,omitempty"`
}

func (x *MyClassSchedulingData) Reset() {
	*x = MyClassSchedulingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyClassSchedulingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyClassSchedulingData) ProtoMessage() {}

func (x *MyClassSchedulingData) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyClassSchedulingData.ProtoReflect.Descriptor instead.
func (*MyClassSchedulingData) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{22}
}

func (x *MyClassSchedulingData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyClassSchedulingData) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *MyClassSchedulingData) GetCourseType() int32 {
	if x != nil {
		return x.CourseType
	}
	return 0
}

func (x *MyClassSchedulingData) GetTeachingType() int32 {
	if x != nil {
		return x.TeachingType
	}
	return 0
}

func (x *MyClassSchedulingData) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *MyClassSchedulingData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *MyClassSchedulingData) GetTeacherId() int64 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *MyClassSchedulingData) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *MyClassSchedulingData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MyClassSchedulingData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MyClassSchedulingData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *MyClassSchedulingData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *MyClassSchedulingData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MyClassSchedulingData) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *MyClassSchedulingData) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *MyClassSchedulingData) GetCourse() []*MyClassSchedulingData_CourseSchedulingCheckIn {
	if x != nil {
		return x.Course
	}
	return nil
}

type CheckInReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CheckInReply) Reset() {
	*x = CheckInReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInReply) ProtoMessage() {}

func (x *CheckInReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInReply.ProtoReflect.Descriptor instead.
func (*CheckInReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{23}
}

func (x *CheckInReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckInReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MyClassSchedulingData_CourseSchedulingCheckIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckIn     int32  `protobuf:"varint,2,opt,name=checkIn,proto3" json:"checkIn,omitempty"`
	StudentName string `protobuf:"bytes,3,opt,name=studentName,proto3" json:"studentName,omitempty"`
}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) Reset() {
	*x = MyClassSchedulingData_CourseSchedulingCheckIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyClassSchedulingData_CourseSchedulingCheckIn) ProtoMessage() {}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyClassSchedulingData_CourseSchedulingCheckIn.ProtoReflect.Descriptor instead.
func (*MyClassSchedulingData_CourseSchedulingCheckIn) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{22, 0}
}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) GetCheckIn() int32 {
	if x != nil {
		return x.CheckIn
	}
	return 0
}

func (x *MyClassSchedulingData_CourseSchedulingCheckIn) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

var File_course_v1_course_proto protoreflect.FileDescriptor

var file_course_v1_course_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x32, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x7c, 0x30, 0x7c, 0x3a, 0x09, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x7c, 0x30, 0x7c, 0x4a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x7c,
	0x30, 0x7c, 0x52, 0x07, 0x75, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x5a, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd1, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x6f,
	0x75, 0x73, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x6f,
	0x75, 0x73, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x53,
	0x68, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d,
	0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x12, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x16, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a,
	0x1c, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x04, 0x0a, 0x13,
	0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x74, 0x22,
	0xb7, 0x01, 0x0a, 0x0f, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7e, 0x0a, 0x1b, 0x4d, 0x79, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x1f, 0x4d, 0x79,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0,
	0x04, 0x0a, 0x16, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x62, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x4d, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x1a, 0x4d, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x05, 0x0a, 0x15, 0x4d, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x65, 0x0a, 0x17, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x87, 0x11, 0x0a, 0x06, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3f, 0x92, 0x41, 0x1e, 0x12, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0x1a, 0x0e, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x87, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x49, 0x92, 0x41, 0x2f, 0x12, 0x15, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x1a, 0x16, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2d, 0xe5, 0x80, 0xbc, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x92, 0x41, 0x22, 0x12, 0x12, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x1a, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x44, 0x92, 0x41, 0x28, 0x12, 0x12,
	0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x1a, 0x12, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x8d, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x92, 0x41, 0x14, 0x12, 0x12,
	0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x88, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe6, 0x88, 0x91, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x37, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x37, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0xa1, 0x01, 0x0a,
	0x0f, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x92,
	0x41, 0x1a, 0x12, 0x18, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x79, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x12, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x88,
	0x91, 0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x92, 0xe8, 0xaf, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x46, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88,
	0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x92, 0xe8, 0xaf, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xc1, 0x01, 0x0a, 0x1e,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x53, 0x92, 0x41, 0x18, 0x12,
	0x16, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x92, 0xe8, 0xaf, 0xbe,
	0x5f, 0xe7, 0xad, 0xbe, 0xe5, 0x88, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a,
	0x22, 0x2d, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x12,
	0xb2, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x49, 0x92, 0x41, 0x1b, 0x12, 0x19,
	0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe7, 0x9a, 0x84, 0xe7, 0x8f, 0xad, 0x5f, 0xe6, 0x8e, 0x92,
	0xe8, 0xaf, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0xbb, 0x01, 0x0a, 0x1d, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x4f, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe7, 0x9a,
	0x84, 0xe7, 0x8f, 0xad, 0x5f, 0xe7, 0xad, 0xbe, 0xe5, 0x88, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x42, 0x2f, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x1c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_course_v1_course_proto_rawDescOnce sync.Once
	file_course_v1_course_proto_rawDescData = file_course_v1_course_proto_rawDesc
)

func file_course_v1_course_proto_rawDescGZIP() []byte {
	file_course_v1_course_proto_rawDescOnce.Do(func() {
		file_course_v1_course_proto_rawDescData = protoimpl.X.CompressGZIP(file_course_v1_course_proto_rawDescData)
	})
	return file_course_v1_course_proto_rawDescData
}

var file_course_v1_course_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_course_v1_course_proto_goTypes = []interface{}{
	(*GetRequest)(nil),                                    // 0: api.course.v1.GetRequest
	(*FindRequest)(nil),                                   // 1: api.course.v1.FindRequest
	(*ListRequest)(nil),                                   // 2: api.course.v1.ListRequest
	(*SearchRequest)(nil),                                 // 3: api.course.v1.SearchRequest
	(*DataReply)(nil),                                     // 4: api.course.v1.DataReply
	(*ListReply)(nil),                                     // 5: api.course.v1.ListReply
	(*Data)(nil),                                          // 6: api.course.v1.Data
	(*Sale)(nil),                                          // 7: api.course.v1.Sale
	(*MyStudentRequest)(nil),                              // 8: api.course.v1.MyStudentRequest
	(*MyStudentDataReply)(nil),                            // 9: api.course.v1.MyStudentDataReply
	(*MyStudentDataListReply)(nil),                        // 10: api.course.v1.MyStudentDataListReply
	(*MyStudentData)(nil),                                 // 11: api.course.v1.MyStudentData
	(*MyStudentCourseDataListReply)(nil),                  // 12: api.course.v1.MyStudentCourseDataListReply
	(*MyStudentCourseData)(nil),                           // 13: api.course.v1.MyStudentCourseData
	(*MyCourseRequest)(nil),                               // 14: api.course.v1.MyCourseRequest
	(*MyCourseSchedulingDataReply)(nil),                   // 15: api.course.v1.MyCourseSchedulingDataReply
	(*MyCourseSchedulingDataListReply)(nil),               // 16: api.course.v1.MyCourseSchedulingDataListReply
	(*MyCourseSchedulingData)(nil),                        // 17: api.course.v1.MyCourseSchedulingData
	(*CourseSchedulingCheckInRequest)(nil),                // 18: api.course.v1.CourseSchedulingCheckInRequest
	(*ClassSchedulingCheckInRequest)(nil),                 // 19: api.course.v1.ClassSchedulingCheckInRequest
	(*MyClassSchedulingDataListReply)(nil),                // 20: api.course.v1.MyClassSchedulingDataListReply
	(*MyClassSchedulingDataReply)(nil),                    // 21: api.course.v1.MyClassSchedulingDataReply
	(*MyClassSchedulingData)(nil),                         // 22: api.course.v1.MyClassSchedulingData
	(*CheckInReply)(nil),                                  // 23: api.course.v1.CheckInReply
	(*MyClassSchedulingData_CourseSchedulingCheckIn)(nil), // 24: api.course.v1.MyClassSchedulingData.CourseSchedulingCheckIn
}
var file_course_v1_course_proto_depIdxs = []int32{
	6,  // 0: api.course.v1.DataReply.data:type_name -> api.course.v1.Data
	6,  // 1: api.course.v1.ListReply.data:type_name -> api.course.v1.Data
	7,  // 2: api.course.v1.Data.sale:type_name -> api.course.v1.Sale
	11, // 3: api.course.v1.MyStudentDataReply.data:type_name -> api.course.v1.MyStudentData
	11, // 4: api.course.v1.MyStudentDataListReply.data:type_name -> api.course.v1.MyStudentData
	13, // 5: api.course.v1.MyStudentCourseDataListReply.data:type_name -> api.course.v1.MyStudentCourseData
	17, // 6: api.course.v1.MyCourseSchedulingDataReply.data:type_name -> api.course.v1.MyCourseSchedulingData
	17, // 7: api.course.v1.MyCourseSchedulingDataListReply.data:type_name -> api.course.v1.MyCourseSchedulingData
	18, // 8: api.course.v1.ClassSchedulingCheckInRequest.course:type_name -> api.course.v1.CourseSchedulingCheckInRequest
	22, // 9: api.course.v1.MyClassSchedulingDataListReply.data:type_name -> api.course.v1.MyClassSchedulingData
	22, // 10: api.course.v1.MyClassSchedulingDataReply.data:type_name -> api.course.v1.MyClassSchedulingData
	24, // 11: api.course.v1.MyClassSchedulingData.course:type_name -> api.course.v1.MyClassSchedulingData.CourseSchedulingCheckIn
	0,  // 12: api.course.v1.Course.Get:input_type -> api.course.v1.GetRequest
	1,  // 13: api.course.v1.Course.Find:input_type -> api.course.v1.FindRequest
	2,  // 14: api.course.v1.Course.List:input_type -> api.course.v1.ListRequest
	3,  // 15: api.course.v1.Course.Search:input_type -> api.course.v1.SearchRequest
	8,  // 16: api.course.v1.Course.MyStudentList:input_type -> api.course.v1.MyStudentRequest
	8,  // 17: api.course.v1.Course.MyStudentInfo:input_type -> api.course.v1.MyStudentRequest
	8,  // 18: api.course.v1.Course.CreateMyStudent:input_type -> api.course.v1.MyStudentRequest
	8,  // 19: api.course.v1.Course.UpdateMyStudent:input_type -> api.course.v1.MyStudentRequest
	14, // 20: api.course.v1.Course.MyStudentCourse:input_type -> api.course.v1.MyCourseRequest
	14, // 21: api.course.v1.Course.MyCourseScheduling:input_type -> api.course.v1.MyCourseRequest
	14, // 22: api.course.v1.Course.TeacherCourseScheduling:input_type -> api.course.v1.MyCourseRequest
	18, // 23: api.course.v1.Course.TeacherCourseSchedulingCheckIn:input_type -> api.course.v1.CourseSchedulingCheckInRequest
	14, // 24: api.course.v1.Course.TeacherClassScheduling:input_type -> api.course.v1.MyCourseRequest
	19, // 25: api.course.v1.Course.TeacherClassSchedulingCheckIn:input_type -> api.course.v1.ClassSchedulingCheckInRequest
	4,  // 26: api.course.v1.Course.Get:output_type -> api.course.v1.DataReply
	4,  // 27: api.course.v1.Course.Find:output_type -> api.course.v1.DataReply
	5,  // 28: api.course.v1.Course.List:output_type -> api.course.v1.ListReply
	5,  // 29: api.course.v1.Course.Search:output_type -> api.course.v1.ListReply
	10, // 30: api.course.v1.Course.MyStudentList:output_type -> api.course.v1.MyStudentDataListReply
	9,  // 31: api.course.v1.Course.MyStudentInfo:output_type -> api.course.v1.MyStudentDataReply
	9,  // 32: api.course.v1.Course.CreateMyStudent:output_type -> api.course.v1.MyStudentDataReply
	9,  // 33: api.course.v1.Course.UpdateMyStudent:output_type -> api.course.v1.MyStudentDataReply
	12, // 34: api.course.v1.Course.MyStudentCourse:output_type -> api.course.v1.MyStudentCourseDataListReply
	16, // 35: api.course.v1.Course.MyCourseScheduling:output_type -> api.course.v1.MyCourseSchedulingDataListReply
	16, // 36: api.course.v1.Course.TeacherCourseScheduling:output_type -> api.course.v1.MyCourseSchedulingDataListReply
	23, // 37: api.course.v1.Course.TeacherCourseSchedulingCheckIn:output_type -> api.course.v1.CheckInReply
	20, // 38: api.course.v1.Course.TeacherClassScheduling:output_type -> api.course.v1.MyClassSchedulingDataListReply
	23, // 39: api.course.v1.Course.TeacherClassSchedulingCheckIn:output_type -> api.course.v1.CheckInReply
	26, // [26:40] is the sub-list for method output_type
	12, // [12:26] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_course_v1_course_proto_init() }
func file_course_v1_course_proto_init() {
	if File_course_v1_course_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_course_v1_course_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentDataListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentCourseDataListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyStudentCourseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCourseSchedulingDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCourseSchedulingDataListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCourseSchedulingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseSchedulingCheckInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassSchedulingCheckInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyClassSchedulingDataListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyClassSchedulingDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyClassSchedulingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyClassSchedulingData_CourseSchedulingCheckIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_course_v1_course_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_course_v1_course_proto_goTypes,
		DependencyIndexes: file_course_v1_course_proto_depIdxs,
		MessageInfos:      file_course_v1_course_proto_msgTypes,
	}.Build()
	File_course_v1_course_proto = out.File
	file_course_v1_course_proto_rawDesc = nil
	file_course_v1_course_proto_goTypes = nil
	file_course_v1_course_proto_depIdxs = nil
}
