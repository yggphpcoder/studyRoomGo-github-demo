// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.3
// source: course/v1/course.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCourseCreateMyStudent = "/api.course.v1.Course/CreateMyStudent"
const OperationCourseFind = "/api.course.v1.Course/Find"
const OperationCourseGet = "/api.course.v1.Course/Get"
const OperationCourseList = "/api.course.v1.Course/List"
const OperationCourseMyCourseScheduling = "/api.course.v1.Course/MyCourseScheduling"
const OperationCourseMyStudentCourse = "/api.course.v1.Course/MyStudentCourse"
const OperationCourseMyStudentInfo = "/api.course.v1.Course/MyStudentInfo"
const OperationCourseMyStudentList = "/api.course.v1.Course/MyStudentList"
const OperationCourseSearch = "/api.course.v1.Course/Search"
const OperationCourseTeacherClassScheduling = "/api.course.v1.Course/TeacherClassScheduling"
const OperationCourseTeacherClassSchedulingCheckIn = "/api.course.v1.Course/TeacherClassSchedulingCheckIn"
const OperationCourseTeacherCourseScheduling = "/api.course.v1.Course/TeacherCourseScheduling"
const OperationCourseTeacherCourseSchedulingCheckIn = "/api.course.v1.Course/TeacherCourseSchedulingCheckIn"
const OperationCourseUpdateMyStudent = "/api.course.v1.Course/UpdateMyStudent"

type CourseHTTPServer interface {
	CreateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
	Find(context.Context, *FindRequest) (*DataReply, error)
	Get(context.Context, *GetRequest) (*DataReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	MyCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error)
	MyStudentCourse(context.Context, *MyCourseRequest) (*MyStudentCourseDataListReply, error)
	MyStudentInfo(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
	MyStudentList(context.Context, *MyStudentRequest) (*MyStudentDataListReply, error)
	Search(context.Context, *SearchRequest) (*ListReply, error)
	TeacherClassScheduling(context.Context, *MyCourseRequest) (*MyClassSchedulingDataListReply, error)
	TeacherClassSchedulingCheckIn(context.Context, *ClassSchedulingCheckInRequest) (*CheckInReply, error)
	TeacherCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error)
	TeacherCourseSchedulingCheckIn(context.Context, *CourseSchedulingCheckInRequest) (*CheckInReply, error)
	UpdateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
}

func RegisterCourseHTTPServer(s *http.Server, srv CourseHTTPServer) {
	r := s.Route("/")
	r.GET("/course/v1/course/{id}", _Course_Get0_HTTP_Handler(srv))
	r.GET("/course/v1/find", _Course_Find0_HTTP_Handler(srv))
	r.GET("/course/v1/list", _Course_List0_HTTP_Handler(srv))
	r.GET("/course/v1/search", _Course_Search0_HTTP_Handler(srv))
	r.GET("/course/v1/my_student", _Course_MyStudentList0_HTTP_Handler(srv))
	r.GET("/course/v1/my_student_info", _Course_MyStudentInfo0_HTTP_Handler(srv))
	r.POST("/course/v1/my_student", _Course_CreateMyStudent0_HTTP_Handler(srv))
	r.PUT("/course/v1/my_student", _Course_UpdateMyStudent0_HTTP_Handler(srv))
	r.GET("/course/v1/my_student_course", _Course_MyStudentCourse0_HTTP_Handler(srv))
	r.GET("/course/v1/my_course_scheduling", _Course_MyCourseScheduling0_HTTP_Handler(srv))
	r.GET("/course/v1/teacher_course_scheduling", _Course_TeacherCourseScheduling0_HTTP_Handler(srv))
	r.POST("/course/v1/teacher_course_scheduling_check_in", _Course_TeacherCourseSchedulingCheckIn0_HTTP_Handler(srv))
	r.GET("/course/v1/teacher_class_scheduling", _Course_TeacherClassScheduling0_HTTP_Handler(srv))
	r.POST("/course/v1/teacher_class_scheduling_check_in", _Course_TeacherClassSchedulingCheckIn0_HTTP_Handler(srv))
}

func _Course_Get0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Course_Find0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseFind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*FindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataReply)
		return ctx.Result(200, reply)
	}
}

func _Course_List0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_Search0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_MyStudentList0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseMyStudentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyStudentList(ctx, req.(*MyStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyStudentDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_MyStudentInfo0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseMyStudentInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyStudentInfo(ctx, req.(*MyStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyStudentDataReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CreateMyStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateMyStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMyStudent(ctx, req.(*MyStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyStudentDataReply)
		return ctx.Result(200, reply)
	}
}

func _Course_UpdateMyStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseUpdateMyStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMyStudent(ctx, req.(*MyStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyStudentDataReply)
		return ctx.Result(200, reply)
	}
}

func _Course_MyStudentCourse0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyCourseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseMyStudentCourse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyStudentCourse(ctx, req.(*MyCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyStudentCourseDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_MyCourseScheduling0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyCourseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseMyCourseScheduling)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyCourseScheduling(ctx, req.(*MyCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyCourseSchedulingDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_TeacherCourseScheduling0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyCourseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseTeacherCourseScheduling)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherCourseScheduling(ctx, req.(*MyCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyCourseSchedulingDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_TeacherCourseSchedulingCheckIn0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CourseSchedulingCheckInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseTeacherCourseSchedulingCheckIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherCourseSchedulingCheckIn(ctx, req.(*CourseSchedulingCheckInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckInReply)
		return ctx.Result(200, reply)
	}
}

func _Course_TeacherClassScheduling0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyCourseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseTeacherClassScheduling)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherClassScheduling(ctx, req.(*MyCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyClassSchedulingDataListReply)
		return ctx.Result(200, reply)
	}
}

func _Course_TeacherClassSchedulingCheckIn0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClassSchedulingCheckInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseTeacherClassSchedulingCheckIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherClassSchedulingCheckIn(ctx, req.(*ClassSchedulingCheckInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckInReply)
		return ctx.Result(200, reply)
	}
}

type CourseHTTPClient interface {
	CreateMyStudent(ctx context.Context, req *MyStudentRequest, opts ...http.CallOption) (rsp *MyStudentDataReply, err error)
	Find(ctx context.Context, req *FindRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *DataReply, err error)
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	MyCourseScheduling(ctx context.Context, req *MyCourseRequest, opts ...http.CallOption) (rsp *MyCourseSchedulingDataListReply, err error)
	MyStudentCourse(ctx context.Context, req *MyCourseRequest, opts ...http.CallOption) (rsp *MyStudentCourseDataListReply, err error)
	MyStudentInfo(ctx context.Context, req *MyStudentRequest, opts ...http.CallOption) (rsp *MyStudentDataReply, err error)
	MyStudentList(ctx context.Context, req *MyStudentRequest, opts ...http.CallOption) (rsp *MyStudentDataListReply, err error)
	Search(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	TeacherClassScheduling(ctx context.Context, req *MyCourseRequest, opts ...http.CallOption) (rsp *MyClassSchedulingDataListReply, err error)
	TeacherClassSchedulingCheckIn(ctx context.Context, req *ClassSchedulingCheckInRequest, opts ...http.CallOption) (rsp *CheckInReply, err error)
	TeacherCourseScheduling(ctx context.Context, req *MyCourseRequest, opts ...http.CallOption) (rsp *MyCourseSchedulingDataListReply, err error)
	TeacherCourseSchedulingCheckIn(ctx context.Context, req *CourseSchedulingCheckInRequest, opts ...http.CallOption) (rsp *CheckInReply, err error)
	UpdateMyStudent(ctx context.Context, req *MyStudentRequest, opts ...http.CallOption) (rsp *MyStudentDataReply, err error)
}

type CourseHTTPClientImpl struct {
	cc *http.Client
}

func NewCourseHTTPClient(client *http.Client) CourseHTTPClient {
	return &CourseHTTPClientImpl{client}
}

func (c *CourseHTTPClientImpl) CreateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...http.CallOption) (*MyStudentDataReply, error) {
	var out MyStudentDataReply
	pattern := "/course/v1/my_student"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateMyStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) Find(ctx context.Context, in *FindRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/course/v1/find"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseFind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*DataReply, error) {
	var out DataReply
	pattern := "/course/v1/course/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/course/v1/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) MyCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...http.CallOption) (*MyCourseSchedulingDataListReply, error) {
	var out MyCourseSchedulingDataListReply
	pattern := "/course/v1/my_course_scheduling"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseMyCourseScheduling))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) MyStudentCourse(ctx context.Context, in *MyCourseRequest, opts ...http.CallOption) (*MyStudentCourseDataListReply, error) {
	var out MyStudentCourseDataListReply
	pattern := "/course/v1/my_student_course"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseMyStudentCourse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) MyStudentInfo(ctx context.Context, in *MyStudentRequest, opts ...http.CallOption) (*MyStudentDataReply, error) {
	var out MyStudentDataReply
	pattern := "/course/v1/my_student_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseMyStudentInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) MyStudentList(ctx context.Context, in *MyStudentRequest, opts ...http.CallOption) (*MyStudentDataListReply, error) {
	var out MyStudentDataListReply
	pattern := "/course/v1/my_student"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseMyStudentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) Search(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/course/v1/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) TeacherClassScheduling(ctx context.Context, in *MyCourseRequest, opts ...http.CallOption) (*MyClassSchedulingDataListReply, error) {
	var out MyClassSchedulingDataListReply
	pattern := "/course/v1/teacher_class_scheduling"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseTeacherClassScheduling))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) TeacherClassSchedulingCheckIn(ctx context.Context, in *ClassSchedulingCheckInRequest, opts ...http.CallOption) (*CheckInReply, error) {
	var out CheckInReply
	pattern := "/course/v1/teacher_class_scheduling_check_in"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseTeacherClassSchedulingCheckIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) TeacherCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...http.CallOption) (*MyCourseSchedulingDataListReply, error) {
	var out MyCourseSchedulingDataListReply
	pattern := "/course/v1/teacher_course_scheduling"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseTeacherCourseScheduling))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) TeacherCourseSchedulingCheckIn(ctx context.Context, in *CourseSchedulingCheckInRequest, opts ...http.CallOption) (*CheckInReply, error) {
	var out CheckInReply
	pattern := "/course/v1/teacher_course_scheduling_check_in"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseTeacherCourseSchedulingCheckIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CourseHTTPClientImpl) UpdateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...http.CallOption) (*MyStudentDataReply, error) {
	var out MyStudentDataReply
	pattern := "/course/v1/my_student"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseUpdateMyStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
