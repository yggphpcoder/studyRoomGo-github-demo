// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: course/v1/course.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Course_Get_FullMethodName                            = "/api.course.v1.Course/Get"
	Course_Find_FullMethodName                           = "/api.course.v1.Course/Find"
	Course_List_FullMethodName                           = "/api.course.v1.Course/List"
	Course_Search_FullMethodName                         = "/api.course.v1.Course/Search"
	Course_MyStudentList_FullMethodName                  = "/api.course.v1.Course/MyStudentList"
	Course_MyStudentInfo_FullMethodName                  = "/api.course.v1.Course/MyStudentInfo"
	Course_CreateMyStudent_FullMethodName                = "/api.course.v1.Course/CreateMyStudent"
	Course_UpdateMyStudent_FullMethodName                = "/api.course.v1.Course/UpdateMyStudent"
	Course_MyStudentCourse_FullMethodName                = "/api.course.v1.Course/MyStudentCourse"
	Course_MyCourseScheduling_FullMethodName             = "/api.course.v1.Course/MyCourseScheduling"
	Course_TeacherCourseScheduling_FullMethodName        = "/api.course.v1.Course/TeacherCourseScheduling"
	Course_TeacherCourseSchedulingCheckIn_FullMethodName = "/api.course.v1.Course/TeacherCourseSchedulingCheckIn"
	Course_TeacherClassScheduling_FullMethodName         = "/api.course.v1.Course/TeacherClassScheduling"
	Course_TeacherClassSchedulingCheckIn_FullMethodName  = "/api.course.v1.Course/TeacherClassSchedulingCheckIn"
)

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error)
	MyStudentList(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataListReply, error)
	MyStudentInfo(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error)
	CreateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error)
	UpdateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error)
	MyStudentCourse(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyStudentCourseDataListReply, error)
	MyCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyCourseSchedulingDataListReply, error)
	TeacherCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyCourseSchedulingDataListReply, error)
	TeacherCourseSchedulingCheckIn(ctx context.Context, in *CourseSchedulingCheckInRequest, opts ...grpc.CallOption) (*CheckInReply, error)
	TeacherClassScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyClassSchedulingDataListReply, error)
	TeacherClassSchedulingCheckIn(ctx context.Context, in *ClassSchedulingCheckInRequest, opts ...grpc.CallOption) (*CheckInReply, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Course_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, Course_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Course_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Course_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) MyStudentList(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataListReply, error) {
	out := new(MyStudentDataListReply)
	err := c.cc.Invoke(ctx, Course_MyStudentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) MyStudentInfo(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error) {
	out := new(MyStudentDataReply)
	err := c.cc.Invoke(ctx, Course_MyStudentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CreateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error) {
	out := new(MyStudentDataReply)
	err := c.cc.Invoke(ctx, Course_CreateMyStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateMyStudent(ctx context.Context, in *MyStudentRequest, opts ...grpc.CallOption) (*MyStudentDataReply, error) {
	out := new(MyStudentDataReply)
	err := c.cc.Invoke(ctx, Course_UpdateMyStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) MyStudentCourse(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyStudentCourseDataListReply, error) {
	out := new(MyStudentCourseDataListReply)
	err := c.cc.Invoke(ctx, Course_MyStudentCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) MyCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyCourseSchedulingDataListReply, error) {
	out := new(MyCourseSchedulingDataListReply)
	err := c.cc.Invoke(ctx, Course_MyCourseScheduling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) TeacherCourseScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyCourseSchedulingDataListReply, error) {
	out := new(MyCourseSchedulingDataListReply)
	err := c.cc.Invoke(ctx, Course_TeacherCourseScheduling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) TeacherCourseSchedulingCheckIn(ctx context.Context, in *CourseSchedulingCheckInRequest, opts ...grpc.CallOption) (*CheckInReply, error) {
	out := new(CheckInReply)
	err := c.cc.Invoke(ctx, Course_TeacherCourseSchedulingCheckIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) TeacherClassScheduling(ctx context.Context, in *MyCourseRequest, opts ...grpc.CallOption) (*MyClassSchedulingDataListReply, error) {
	out := new(MyClassSchedulingDataListReply)
	err := c.cc.Invoke(ctx, Course_TeacherClassScheduling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) TeacherClassSchedulingCheckIn(ctx context.Context, in *ClassSchedulingCheckInRequest, opts ...grpc.CallOption) (*CheckInReply, error) {
	out := new(CheckInReply)
	err := c.cc.Invoke(ctx, Course_TeacherClassSchedulingCheckIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	Get(context.Context, *GetRequest) (*DataReply, error)
	Find(context.Context, *FindRequest) (*DataReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Search(context.Context, *SearchRequest) (*ListReply, error)
	MyStudentList(context.Context, *MyStudentRequest) (*MyStudentDataListReply, error)
	MyStudentInfo(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
	CreateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
	UpdateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error)
	MyStudentCourse(context.Context, *MyCourseRequest) (*MyStudentCourseDataListReply, error)
	MyCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error)
	TeacherCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error)
	TeacherCourseSchedulingCheckIn(context.Context, *CourseSchedulingCheckInRequest) (*CheckInReply, error)
	TeacherClassScheduling(context.Context, *MyCourseRequest) (*MyClassSchedulingDataListReply, error)
	TeacherClassSchedulingCheckIn(context.Context, *ClassSchedulingCheckInRequest) (*CheckInReply, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) Get(context.Context, *GetRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCourseServer) Find(context.Context, *FindRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCourseServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCourseServer) Search(context.Context, *SearchRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCourseServer) MyStudentList(context.Context, *MyStudentRequest) (*MyStudentDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyStudentList not implemented")
}
func (UnimplementedCourseServer) MyStudentInfo(context.Context, *MyStudentRequest) (*MyStudentDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyStudentInfo not implemented")
}
func (UnimplementedCourseServer) CreateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyStudent not implemented")
}
func (UnimplementedCourseServer) UpdateMyStudent(context.Context, *MyStudentRequest) (*MyStudentDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyStudent not implemented")
}
func (UnimplementedCourseServer) MyStudentCourse(context.Context, *MyCourseRequest) (*MyStudentCourseDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyStudentCourse not implemented")
}
func (UnimplementedCourseServer) MyCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyCourseScheduling not implemented")
}
func (UnimplementedCourseServer) TeacherCourseScheduling(context.Context, *MyCourseRequest) (*MyCourseSchedulingDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherCourseScheduling not implemented")
}
func (UnimplementedCourseServer) TeacherCourseSchedulingCheckIn(context.Context, *CourseSchedulingCheckInRequest) (*CheckInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherCourseSchedulingCheckIn not implemented")
}
func (UnimplementedCourseServer) TeacherClassScheduling(context.Context, *MyCourseRequest) (*MyClassSchedulingDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherClassScheduling not implemented")
}
func (UnimplementedCourseServer) TeacherClassSchedulingCheckIn(context.Context, *ClassSchedulingCheckInRequest) (*CheckInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherClassSchedulingCheckIn not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_MyStudentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).MyStudentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_MyStudentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).MyStudentList(ctx, req.(*MyStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_MyStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).MyStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_MyStudentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).MyStudentInfo(ctx, req.(*MyStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CreateMyStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateMyStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CreateMyStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateMyStudent(ctx, req.(*MyStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateMyStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateMyStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_UpdateMyStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateMyStudent(ctx, req.(*MyStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_MyStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).MyStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_MyStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).MyStudentCourse(ctx, req.(*MyCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_MyCourseScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).MyCourseScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_MyCourseScheduling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).MyCourseScheduling(ctx, req.(*MyCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TeacherCourseScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TeacherCourseScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_TeacherCourseScheduling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TeacherCourseScheduling(ctx, req.(*MyCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TeacherCourseSchedulingCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseSchedulingCheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TeacherCourseSchedulingCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_TeacherCourseSchedulingCheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TeacherCourseSchedulingCheckIn(ctx, req.(*CourseSchedulingCheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TeacherClassScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TeacherClassScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_TeacherClassScheduling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TeacherClassScheduling(ctx, req.(*MyCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TeacherClassSchedulingCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassSchedulingCheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TeacherClassSchedulingCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_TeacherClassSchedulingCheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TeacherClassSchedulingCheckIn(ctx, req.(*ClassSchedulingCheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.course.v1.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Course_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Course_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Course_List_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Course_Search_Handler,
		},
		{
			MethodName: "MyStudentList",
			Handler:    _Course_MyStudentList_Handler,
		},
		{
			MethodName: "MyStudentInfo",
			Handler:    _Course_MyStudentInfo_Handler,
		},
		{
			MethodName: "CreateMyStudent",
			Handler:    _Course_CreateMyStudent_Handler,
		},
		{
			MethodName: "UpdateMyStudent",
			Handler:    _Course_UpdateMyStudent_Handler,
		},
		{
			MethodName: "MyStudentCourse",
			Handler:    _Course_MyStudentCourse_Handler,
		},
		{
			MethodName: "MyCourseScheduling",
			Handler:    _Course_MyCourseScheduling_Handler,
		},
		{
			MethodName: "TeacherCourseScheduling",
			Handler:    _Course_TeacherCourseScheduling_Handler,
		},
		{
			MethodName: "TeacherCourseSchedulingCheckIn",
			Handler:    _Course_TeacherCourseSchedulingCheckIn_Handler,
		},
		{
			MethodName: "TeacherClassScheduling",
			Handler:    _Course_TeacherClassScheduling_Handler,
		},
		{
			MethodName: "TeacherClassSchedulingCheckIn",
			Handler:    _Course_TeacherClassSchedulingCheckIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course/v1/course.proto",
}
